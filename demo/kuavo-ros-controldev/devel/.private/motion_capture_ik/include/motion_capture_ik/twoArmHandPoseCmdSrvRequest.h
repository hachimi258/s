// Generated by gencpp from file motion_capture_ik/twoArmHandPoseCmdSrvRequest.msg
// DO NOT EDIT!


#ifndef MOTION_CAPTURE_IK_MESSAGE_TWOARMHANDPOSECMDSRVREQUEST_H
#define MOTION_CAPTURE_IK_MESSAGE_TWOARMHANDPOSECMDSRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <motion_capture_ik/twoArmHandPoseCmd.h>

namespace motion_capture_ik
{
template <class ContainerAllocator>
struct twoArmHandPoseCmdSrvRequest_
{
  typedef twoArmHandPoseCmdSrvRequest_<ContainerAllocator> Type;

  twoArmHandPoseCmdSrvRequest_()
    : twoArmHandPoseCmdRequest()  {
    }
  twoArmHandPoseCmdSrvRequest_(const ContainerAllocator& _alloc)
    : twoArmHandPoseCmdRequest(_alloc)  {
  (void)_alloc;
    }



   typedef  ::motion_capture_ik::twoArmHandPoseCmd_<ContainerAllocator>  _twoArmHandPoseCmdRequest_type;
  _twoArmHandPoseCmdRequest_type twoArmHandPoseCmdRequest;





  typedef boost::shared_ptr< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct twoArmHandPoseCmdSrvRequest_

typedef ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<std::allocator<void> > twoArmHandPoseCmdSrvRequest;

typedef boost::shared_ptr< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest > twoArmHandPoseCmdSrvRequestPtr;
typedef boost::shared_ptr< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest const> twoArmHandPoseCmdSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator1> & lhs, const ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.twoArmHandPoseCmdRequest == rhs.twoArmHandPoseCmdRequest;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator1> & lhs, const ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motion_capture_ik

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b372ee6cf4101587f773b62c6572c72";
  }

  static const char* value(const ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b372ee6cf410158ULL;
  static const uint64_t static_value2 = 0x7f773b62c6572c72ULL;
};

template<class ContainerAllocator>
struct DataType< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion_capture_ik/twoArmHandPoseCmdSrvRequest";
  }

  static const char* value(const ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twoArmHandPoseCmd twoArmHandPoseCmdRequest\n"
"\n"
"================================================================================\n"
"MSG: motion_capture_ik/twoArmHandPoseCmd\n"
"twoArmHandPose  hand_poses\n"
"# params for the IK solver\n"
"bool use_custom_ik_param\n"
"bool joint_angles_as_q0\n"
"ikSolveParam ik_param\n"
"================================================================================\n"
"MSG: motion_capture_ik/twoArmHandPose\n"
"Header header\n"
"armHandPose  left_pose\n"
"armHandPose  right_pose\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: motion_capture_ik/armHandPose\n"
"float64[3] pos_xyz\n"
"float64[4] quat_xyzw\n"
"\n"
"float64[3] elbow_pos_xyz\n"
"\n"
"float64[7] joint_angles\n"
"================================================================================\n"
"MSG: motion_capture_ik/ikSolveParam\n"
"# snopt params\n"
"float64 major_optimality_tol\n"
"float64 major_feasibility_tol\n"
"float64 minor_feasibility_tol\n"
"float64 major_iterations_limit\n"
"# constraint and cost params\n"
"float64 oritation_constraint_tol\n"
"float64 pos_constraint_tol # work when pos_cost_weight > 0.0\n"
"float64 pos_cost_weight\n"
;
  }

  static const char* value(const ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.twoArmHandPoseCmdRequest);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct twoArmHandPoseCmdSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion_capture_ik::twoArmHandPoseCmdSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "twoArmHandPoseCmdRequest: ";
    s << std::endl;
    Printer< ::motion_capture_ik::twoArmHandPoseCmd_<ContainerAllocator> >::stream(s, indent + "  ", v.twoArmHandPoseCmdRequest);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_CAPTURE_IK_MESSAGE_TWOARMHANDPOSECMDSRVREQUEST_H
