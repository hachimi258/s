// Generated by gencpp from file motion_capture_ik/ikSolveParam.msg
// DO NOT EDIT!


#ifndef MOTION_CAPTURE_IK_MESSAGE_IKSOLVEPARAM_H
#define MOTION_CAPTURE_IK_MESSAGE_IKSOLVEPARAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motion_capture_ik
{
template <class ContainerAllocator>
struct ikSolveParam_
{
  typedef ikSolveParam_<ContainerAllocator> Type;

  ikSolveParam_()
    : major_optimality_tol(0.0)
    , major_feasibility_tol(0.0)
    , minor_feasibility_tol(0.0)
    , major_iterations_limit(0.0)
    , oritation_constraint_tol(0.0)
    , pos_constraint_tol(0.0)
    , pos_cost_weight(0.0)  {
    }
  ikSolveParam_(const ContainerAllocator& _alloc)
    : major_optimality_tol(0.0)
    , major_feasibility_tol(0.0)
    , minor_feasibility_tol(0.0)
    , major_iterations_limit(0.0)
    , oritation_constraint_tol(0.0)
    , pos_constraint_tol(0.0)
    , pos_cost_weight(0.0)  {
  (void)_alloc;
    }



   typedef double _major_optimality_tol_type;
  _major_optimality_tol_type major_optimality_tol;

   typedef double _major_feasibility_tol_type;
  _major_feasibility_tol_type major_feasibility_tol;

   typedef double _minor_feasibility_tol_type;
  _minor_feasibility_tol_type minor_feasibility_tol;

   typedef double _major_iterations_limit_type;
  _major_iterations_limit_type major_iterations_limit;

   typedef double _oritation_constraint_tol_type;
  _oritation_constraint_tol_type oritation_constraint_tol;

   typedef double _pos_constraint_tol_type;
  _pos_constraint_tol_type pos_constraint_tol;

   typedef double _pos_cost_weight_type;
  _pos_cost_weight_type pos_cost_weight;





  typedef boost::shared_ptr< ::motion_capture_ik::ikSolveParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion_capture_ik::ikSolveParam_<ContainerAllocator> const> ConstPtr;

}; // struct ikSolveParam_

typedef ::motion_capture_ik::ikSolveParam_<std::allocator<void> > ikSolveParam;

typedef boost::shared_ptr< ::motion_capture_ik::ikSolveParam > ikSolveParamPtr;
typedef boost::shared_ptr< ::motion_capture_ik::ikSolveParam const> ikSolveParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion_capture_ik::ikSolveParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion_capture_ik::ikSolveParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motion_capture_ik::ikSolveParam_<ContainerAllocator1> & lhs, const ::motion_capture_ik::ikSolveParam_<ContainerAllocator2> & rhs)
{
  return lhs.major_optimality_tol == rhs.major_optimality_tol &&
    lhs.major_feasibility_tol == rhs.major_feasibility_tol &&
    lhs.minor_feasibility_tol == rhs.minor_feasibility_tol &&
    lhs.major_iterations_limit == rhs.major_iterations_limit &&
    lhs.oritation_constraint_tol == rhs.oritation_constraint_tol &&
    lhs.pos_constraint_tol == rhs.pos_constraint_tol &&
    lhs.pos_cost_weight == rhs.pos_cost_weight;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motion_capture_ik::ikSolveParam_<ContainerAllocator1> & lhs, const ::motion_capture_ik::ikSolveParam_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motion_capture_ik

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::motion_capture_ik::ikSolveParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_capture_ik::ikSolveParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_capture_ik::ikSolveParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_capture_ik::ikSolveParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_capture_ik::ikSolveParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_capture_ik::ikSolveParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion_capture_ik::ikSolveParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be29d8b02ad14da680464b8c4f590f98";
  }

  static const char* value(const ::motion_capture_ik::ikSolveParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe29d8b02ad14da6ULL;
  static const uint64_t static_value2 = 0x80464b8c4f590f98ULL;
};

template<class ContainerAllocator>
struct DataType< ::motion_capture_ik::ikSolveParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion_capture_ik/ikSolveParam";
  }

  static const char* value(const ::motion_capture_ik::ikSolveParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion_capture_ik::ikSolveParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# snopt params\n"
"float64 major_optimality_tol\n"
"float64 major_feasibility_tol\n"
"float64 minor_feasibility_tol\n"
"float64 major_iterations_limit\n"
"# constraint and cost params\n"
"float64 oritation_constraint_tol\n"
"float64 pos_constraint_tol # work when pos_cost_weight > 0.0\n"
"float64 pos_cost_weight\n"
;
  }

  static const char* value(const ::motion_capture_ik::ikSolveParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion_capture_ik::ikSolveParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.major_optimality_tol);
      stream.next(m.major_feasibility_tol);
      stream.next(m.minor_feasibility_tol);
      stream.next(m.major_iterations_limit);
      stream.next(m.oritation_constraint_tol);
      stream.next(m.pos_constraint_tol);
      stream.next(m.pos_cost_weight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ikSolveParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion_capture_ik::ikSolveParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion_capture_ik::ikSolveParam_<ContainerAllocator>& v)
  {
    s << indent << "major_optimality_tol: ";
    Printer<double>::stream(s, indent + "  ", v.major_optimality_tol);
    s << indent << "major_feasibility_tol: ";
    Printer<double>::stream(s, indent + "  ", v.major_feasibility_tol);
    s << indent << "minor_feasibility_tol: ";
    Printer<double>::stream(s, indent + "  ", v.minor_feasibility_tol);
    s << indent << "major_iterations_limit: ";
    Printer<double>::stream(s, indent + "  ", v.major_iterations_limit);
    s << indent << "oritation_constraint_tol: ";
    Printer<double>::stream(s, indent + "  ", v.oritation_constraint_tol);
    s << indent << "pos_constraint_tol: ";
    Printer<double>::stream(s, indent + "  ", v.pos_constraint_tol);
    s << indent << "pos_cost_weight: ";
    Printer<double>::stream(s, indent + "  ", v.pos_cost_weight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_CAPTURE_IK_MESSAGE_IKSOLVEPARAM_H
