// Generated by gencpp from file motion_capture_ik/twoArmHandPoseCmdSrvResponse.msg
// DO NOT EDIT!


#ifndef MOTION_CAPTURE_IK_MESSAGE_TWOARMHANDPOSECMDSRVRESPONSE_H
#define MOTION_CAPTURE_IK_MESSAGE_TWOARMHANDPOSECMDSRVRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <motion_capture_ik/twoArmHandPose.h>

namespace motion_capture_ik
{
template <class ContainerAllocator>
struct twoArmHandPoseCmdSrvResponse_
{
  typedef twoArmHandPoseCmdSrvResponse_<ContainerAllocator> Type;

  twoArmHandPoseCmdSrvResponse_()
    : success(false)
    , with_torso(false)
    , q_arm()
    , q_torso()
    , time_cost(0.0)
    , hand_poses()  {
    }
  twoArmHandPoseCmdSrvResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , with_torso(false)
    , q_arm(_alloc)
    , q_torso(_alloc)
    , time_cost(0.0)
    , hand_poses(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef uint8_t _with_torso_type;
  _with_torso_type with_torso;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _q_arm_type;
  _q_arm_type q_arm;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _q_torso_type;
  _q_torso_type q_torso;

   typedef double _time_cost_type;
  _time_cost_type time_cost;

   typedef  ::motion_capture_ik::twoArmHandPose_<ContainerAllocator>  _hand_poses_type;
  _hand_poses_type hand_poses;





  typedef boost::shared_ptr< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct twoArmHandPoseCmdSrvResponse_

typedef ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<std::allocator<void> > twoArmHandPoseCmdSrvResponse;

typedef boost::shared_ptr< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse > twoArmHandPoseCmdSrvResponsePtr;
typedef boost::shared_ptr< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse const> twoArmHandPoseCmdSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator1> & lhs, const ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.with_torso == rhs.with_torso &&
    lhs.q_arm == rhs.q_arm &&
    lhs.q_torso == rhs.q_torso &&
    lhs.time_cost == rhs.time_cost &&
    lhs.hand_poses == rhs.hand_poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator1> & lhs, const ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motion_capture_ik

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7dba8c11b6c3ac9ec243b4520ad906c7";
  }

  static const char* value(const ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7dba8c11b6c3ac9eULL;
  static const uint64_t static_value2 = 0xc243b4520ad906c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion_capture_ik/twoArmHandPoseCmdSrvResponse";
  }

  static const char* value(const ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"bool with_torso\n"
"float64[] q_arm\n"
"float64[] q_torso\n"
"\n"
"float64   time_cost # unit: ms\n"
"# ik result\n"
"twoArmHandPose  hand_poses\n"
"\n"
"================================================================================\n"
"MSG: motion_capture_ik/twoArmHandPose\n"
"Header header\n"
"armHandPose  left_pose\n"
"armHandPose  right_pose\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: motion_capture_ik/armHandPose\n"
"float64[3] pos_xyz\n"
"float64[4] quat_xyzw\n"
"\n"
"float64[3] elbow_pos_xyz\n"
"\n"
"float64[7] joint_angles\n"
;
  }

  static const char* value(const ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.with_torso);
      stream.next(m.q_arm);
      stream.next(m.q_torso);
      stream.next(m.time_cost);
      stream.next(m.hand_poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct twoArmHandPoseCmdSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion_capture_ik::twoArmHandPoseCmdSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "with_torso: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.with_torso);
    s << indent << "q_arm[]" << std::endl;
    for (size_t i = 0; i < v.q_arm.size(); ++i)
    {
      s << indent << "  q_arm[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_arm[i]);
    }
    s << indent << "q_torso[]" << std::endl;
    for (size_t i = 0; i < v.q_torso.size(); ++i)
    {
      s << indent << "  q_torso[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_torso[i]);
    }
    s << indent << "time_cost: ";
    Printer<double>::stream(s, indent + "  ", v.time_cost);
    s << indent << "hand_poses: ";
    s << std::endl;
    Printer< ::motion_capture_ik::twoArmHandPose_<ContainerAllocator> >::stream(s, indent + "  ", v.hand_poses);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_CAPTURE_IK_MESSAGE_TWOARMHANDPOSECMDSRVRESPONSE_H
