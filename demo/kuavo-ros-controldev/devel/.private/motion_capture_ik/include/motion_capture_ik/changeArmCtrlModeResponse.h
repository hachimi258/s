// Generated by gencpp from file motion_capture_ik/changeArmCtrlModeResponse.msg
// DO NOT EDIT!


#ifndef MOTION_CAPTURE_IK_MESSAGE_CHANGEARMCTRLMODERESPONSE_H
#define MOTION_CAPTURE_IK_MESSAGE_CHANGEARMCTRLMODERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motion_capture_ik
{
template <class ContainerAllocator>
struct changeArmCtrlModeResponse_
{
  typedef changeArmCtrlModeResponse_<ContainerAllocator> Type;

  changeArmCtrlModeResponse_()
    : result(false)
    , mode(0)
    , message()  {
    }
  changeArmCtrlModeResponse_(const ContainerAllocator& _alloc)
    : result(false)
    , mode(0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> const> ConstPtr;

}; // struct changeArmCtrlModeResponse_

typedef ::motion_capture_ik::changeArmCtrlModeResponse_<std::allocator<void> > changeArmCtrlModeResponse;

typedef boost::shared_ptr< ::motion_capture_ik::changeArmCtrlModeResponse > changeArmCtrlModeResponsePtr;
typedef boost::shared_ptr< ::motion_capture_ik::changeArmCtrlModeResponse const> changeArmCtrlModeResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator1> & lhs, const ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.mode == rhs.mode &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator1> & lhs, const ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motion_capture_ik

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f115bf9b7d68ace12ac850b142c1536";
  }

  static const char* value(const ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f115bf9b7d68aceULL;
  static const uint64_t static_value2 = 0x12ac850b142c1536ULL;
};

template<class ContainerAllocator>
struct DataType< ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion_capture_ik/changeArmCtrlModeResponse";
  }

  static const char* value(const ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool result\n"
"int32 mode \n"
"string message\n"
"\n"
"\n"
;
  }

  static const char* value(const ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.mode);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct changeArmCtrlModeResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion_capture_ik::changeArmCtrlModeResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_CAPTURE_IK_MESSAGE_CHANGEARMCTRLMODERESPONSE_H
