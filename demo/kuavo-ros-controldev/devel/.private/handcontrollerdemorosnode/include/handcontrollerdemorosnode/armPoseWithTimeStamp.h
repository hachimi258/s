// Generated by gencpp from file handcontrollerdemorosnode/armPoseWithTimeStamp.msg
// DO NOT EDIT!


#ifndef HANDCONTROLLERDEMOROSNODE_MESSAGE_ARMPOSEWITHTIMESTAMP_H
#define HANDCONTROLLERDEMOROSNODE_MESSAGE_ARMPOSEWITHTIMESTAMP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace handcontrollerdemorosnode
{
template <class ContainerAllocator>
struct armPoseWithTimeStamp_
{
  typedef armPoseWithTimeStamp_<ContainerAllocator> Type;

  armPoseWithTimeStamp_()
    : offset(0)
    , left_hand_pose()
    , right_hand_pose()  {
    }
  armPoseWithTimeStamp_(const ContainerAllocator& _alloc)
    : offset(0)
    , left_hand_pose(_alloc)
    , right_hand_pose(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _offset_type;
  _offset_type offset;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _left_hand_pose_type;
  _left_hand_pose_type left_hand_pose;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _right_hand_pose_type;
  _right_hand_pose_type right_hand_pose;





  typedef boost::shared_ptr< ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> const> ConstPtr;

}; // struct armPoseWithTimeStamp_

typedef ::handcontrollerdemorosnode::armPoseWithTimeStamp_<std::allocator<void> > armPoseWithTimeStamp;

typedef boost::shared_ptr< ::handcontrollerdemorosnode::armPoseWithTimeStamp > armPoseWithTimeStampPtr;
typedef boost::shared_ptr< ::handcontrollerdemorosnode::armPoseWithTimeStamp const> armPoseWithTimeStampConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator1> & lhs, const ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator2> & rhs)
{
  return lhs.offset == rhs.offset &&
    lhs.left_hand_pose == rhs.left_hand_pose &&
    lhs.right_hand_pose == rhs.right_hand_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator1> & lhs, const ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace handcontrollerdemorosnode

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3404338b5cb042ac3b3cf3de3f0fcb4f";
  }

  static const char* value(const ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3404338b5cb042acULL;
  static const uint64_t static_value2 = 0x3b3cf3de3f0fcb4fULL;
};

template<class ContainerAllocator>
struct DataType< ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "handcontrollerdemorosnode/armPoseWithTimeStamp";
  }

  static const char* value(const ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 offset\n"
"float64[] left_hand_pose\n"
"float64[] right_hand_pose\n"
;
  }

  static const char* value(const ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.offset);
      stream.next(m.left_hand_pose);
      stream.next(m.right_hand_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct armPoseWithTimeStamp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::handcontrollerdemorosnode::armPoseWithTimeStamp_<ContainerAllocator>& v)
  {
    s << indent << "offset: ";
    Printer<int32_t>::stream(s, indent + "  ", v.offset);
    s << indent << "left_hand_pose[]" << std::endl;
    for (size_t i = 0; i < v.left_hand_pose.size(); ++i)
    {
      s << indent << "  left_hand_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.left_hand_pose[i]);
    }
    s << indent << "right_hand_pose[]" << std::endl;
    for (size_t i = 0; i < v.right_hand_pose.size(); ++i)
    {
      s << indent << "  right_hand_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.right_hand_pose[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HANDCONTROLLERDEMOROSNODE_MESSAGE_ARMPOSEWITHTIMESTAMP_H
