// Generated by gencpp from file noitom_hi5_hand_udp_python/PoseInfoList.msg
// DO NOT EDIT!


#ifndef NOITOM_HI5_HAND_UDP_PYTHON_MESSAGE_POSEINFOLIST_H
#define NOITOM_HI5_HAND_UDP_PYTHON_MESSAGE_POSEINFOLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <noitom_hi5_hand_udp_python/PoseInfo.h>

namespace noitom_hi5_hand_udp_python
{
template <class ContainerAllocator>
struct PoseInfoList_
{
  typedef PoseInfoList_<ContainerAllocator> Type;

  PoseInfoList_()
    : timestamp_ms(0)
    , is_high_confidence(false)
    , is_hand_tracking(false)
    , poses()  {
    }
  PoseInfoList_(const ContainerAllocator& _alloc)
    : timestamp_ms(0)
    , is_high_confidence(false)
    , is_hand_tracking(false)
    , poses(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _timestamp_ms_type;
  _timestamp_ms_type timestamp_ms;

   typedef uint8_t _is_high_confidence_type;
  _is_high_confidence_type is_high_confidence;

   typedef uint8_t _is_hand_tracking_type;
  _is_hand_tracking_type is_hand_tracking;

   typedef std::vector< ::noitom_hi5_hand_udp_python::PoseInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::noitom_hi5_hand_udp_python::PoseInfo_<ContainerAllocator> >> _poses_type;
  _poses_type poses;





  typedef boost::shared_ptr< ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> const> ConstPtr;

}; // struct PoseInfoList_

typedef ::noitom_hi5_hand_udp_python::PoseInfoList_<std::allocator<void> > PoseInfoList;

typedef boost::shared_ptr< ::noitom_hi5_hand_udp_python::PoseInfoList > PoseInfoListPtr;
typedef boost::shared_ptr< ::noitom_hi5_hand_udp_python::PoseInfoList const> PoseInfoListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator1> & lhs, const ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp_ms == rhs.timestamp_ms &&
    lhs.is_high_confidence == rhs.is_high_confidence &&
    lhs.is_hand_tracking == rhs.is_hand_tracking &&
    lhs.poses == rhs.poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator1> & lhs, const ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace noitom_hi5_hand_udp_python

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f56d5e4df1c0e38a423ead4bde9414b3";
  }

  static const char* value(const ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf56d5e4df1c0e38aULL;
  static const uint64_t static_value2 = 0x423ead4bde9414b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "noitom_hi5_hand_udp_python/PoseInfoList";
  }

  static const char* value(const ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 timestamp_ms\n"
"bool is_high_confidence\n"
"bool is_hand_tracking\n"
"PoseInfo[] poses\n"
"================================================================================\n"
"MSG: noitom_hi5_hand_udp_python/PoseInfo\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_ms);
      stream.next(m.is_high_confidence);
      stream.next(m.is_hand_tracking);
      stream.next(m.poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseInfoList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::noitom_hi5_hand_udp_python::PoseInfoList_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_ms: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp_ms);
    s << indent << "is_high_confidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_high_confidence);
    s << indent << "is_hand_tracking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_hand_tracking);
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::noitom_hi5_hand_udp_python::PoseInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOITOM_HI5_HAND_UDP_PYTHON_MESSAGE_POSEINFOLIST_H
