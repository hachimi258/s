// Generated by gencpp from file noitom_hi5_hand_udp_python/handRotationEular.msg
// DO NOT EDIT!


#ifndef NOITOM_HI5_HAND_UDP_PYTHON_MESSAGE_HANDROTATIONEULAR_H
#define NOITOM_HI5_HAND_UDP_PYTHON_MESSAGE_HANDROTATIONEULAR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <noitom_hi5_hand_udp_python/Vector4.h>

namespace noitom_hi5_hand_udp_python
{
template <class ContainerAllocator>
struct handRotationEular_
{
  typedef handRotationEular_<ContainerAllocator> Type;

  handRotationEular_()
    : eulerAngles()  {
    }
  handRotationEular_(const ContainerAllocator& _alloc)
    : eulerAngles(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::noitom_hi5_hand_udp_python::Vector4_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::noitom_hi5_hand_udp_python::Vector4_<ContainerAllocator> >> _eulerAngles_type;
  _eulerAngles_type eulerAngles;





  typedef boost::shared_ptr< ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> const> ConstPtr;

}; // struct handRotationEular_

typedef ::noitom_hi5_hand_udp_python::handRotationEular_<std::allocator<void> > handRotationEular;

typedef boost::shared_ptr< ::noitom_hi5_hand_udp_python::handRotationEular > handRotationEularPtr;
typedef boost::shared_ptr< ::noitom_hi5_hand_udp_python::handRotationEular const> handRotationEularConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator1> & lhs, const ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator2> & rhs)
{
  return lhs.eulerAngles == rhs.eulerAngles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator1> & lhs, const ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace noitom_hi5_hand_udp_python

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75ea7fdfd1913bbabb0a96c424b42024";
  }

  static const char* value(const ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75ea7fdfd1913bbaULL;
  static const uint64_t static_value2 = 0xbb0a96c424b42024ULL;
};

template<class ContainerAllocator>
struct DataType< ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> >
{
  static const char* value()
  {
    return "noitom_hi5_hand_udp_python/handRotationEular";
  }

  static const char* value(const ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> >
{
  static const char* value()
  {
    return "noitom_hi5_hand_udp_python/Vector4[] eulerAngles\n"
"\n"
"================================================================================\n"
"MSG: noitom_hi5_hand_udp_python/Vector4\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 w\n"
;
  }

  static const char* value(const ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.eulerAngles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct handRotationEular_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::noitom_hi5_hand_udp_python::handRotationEular_<ContainerAllocator>& v)
  {
    s << indent << "eulerAngles[]" << std::endl;
    for (size_t i = 0; i < v.eulerAngles.size(); ++i)
    {
      s << indent << "  eulerAngles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::noitom_hi5_hand_udp_python::Vector4_<ContainerAllocator> >::stream(s, indent + "    ", v.eulerAngles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOITOM_HI5_HAND_UDP_PYTHON_MESSAGE_HANDROTATIONEULAR_H
