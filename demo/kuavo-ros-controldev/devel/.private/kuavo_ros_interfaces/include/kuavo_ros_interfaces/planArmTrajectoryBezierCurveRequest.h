// Generated by gencpp from file kuavo_ros_interfaces/planArmTrajectoryBezierCurveRequest.msg
// DO NOT EDIT!


#ifndef KUAVO_ROS_INTERFACES_MESSAGE_PLANARMTRAJECTORYBEZIERCURVEREQUEST_H
#define KUAVO_ROS_INTERFACES_MESSAGE_PLANARMTRAJECTORYBEZIERCURVEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kuavo_ros_interfaces/jointBezierTrajectory.h>

namespace kuavo_ros_interfaces
{
template <class ContainerAllocator>
struct planArmTrajectoryBezierCurveRequest_
{
  typedef planArmTrajectoryBezierCurveRequest_<ContainerAllocator> Type;

  planArmTrajectoryBezierCurveRequest_()
    : multi_joint_bezier_trajectory()
    , start_frame_time(0.0)
    , end_frame_time(0.0)
    , joint_names()  {
    }
  planArmTrajectoryBezierCurveRequest_(const ContainerAllocator& _alloc)
    : multi_joint_bezier_trajectory(_alloc)
    , start_frame_time(0.0)
    , end_frame_time(0.0)
    , joint_names(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> >> _multi_joint_bezier_trajectory_type;
  _multi_joint_bezier_trajectory_type multi_joint_bezier_trajectory;

   typedef double _start_frame_time_type;
  _start_frame_time_type start_frame_time;

   typedef double _end_frame_time_type;
  _end_frame_time_type end_frame_time;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _joint_names_type;
  _joint_names_type joint_names;





  typedef boost::shared_ptr< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> const> ConstPtr;

}; // struct planArmTrajectoryBezierCurveRequest_

typedef ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<std::allocator<void> > planArmTrajectoryBezierCurveRequest;

typedef boost::shared_ptr< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest > planArmTrajectoryBezierCurveRequestPtr;
typedef boost::shared_ptr< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest const> planArmTrajectoryBezierCurveRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator1> & lhs, const ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator2> & rhs)
{
  return lhs.multi_joint_bezier_trajectory == rhs.multi_joint_bezier_trajectory &&
    lhs.start_frame_time == rhs.start_frame_time &&
    lhs.end_frame_time == rhs.end_frame_time &&
    lhs.joint_names == rhs.joint_names;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator1> & lhs, const ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_ros_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd4c2b9f2a4883680ef63a437da922a8";
  }

  static const char* value(const ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd4c2b9f2a488368ULL;
  static const uint64_t static_value2 = 0x0ef63a437da922a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_ros_interfaces/planArmTrajectoryBezierCurveRequest";
  }

  static const char* value(const ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_ros_interfaces/jointBezierTrajectory[] multi_joint_bezier_trajectory\n"
"float64 start_frame_time\n"
"float64 end_frame_time\n"
"string[] joint_names\n"
"\n"
"================================================================================\n"
"MSG: kuavo_ros_interfaces/jointBezierTrajectory\n"
"kuavo_ros_interfaces/bezierCurveCubicPoint[] bezier_curve_points\n"
"================================================================================\n"
"MSG: kuavo_ros_interfaces/bezierCurveCubicPoint\n"
"# [x, y] x is time, y is value\n"
"\n"
"float64[] end_point\n"
"float64[] left_control_point\n"
"float64[] right_control_point\n"
;
  }

  static const char* value(const ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.multi_joint_bezier_trajectory);
      stream.next(m.start_frame_time);
      stream.next(m.end_frame_time);
      stream.next(m.joint_names);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct planArmTrajectoryBezierCurveRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_ros_interfaces::planArmTrajectoryBezierCurveRequest_<ContainerAllocator>& v)
  {
    s << indent << "multi_joint_bezier_trajectory[]" << std::endl;
    for (size_t i = 0; i < v.multi_joint_bezier_trajectory.size(); ++i)
    {
      s << indent << "  multi_joint_bezier_trajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.multi_joint_bezier_trajectory[i]);
    }
    s << indent << "start_frame_time: ";
    Printer<double>::stream(s, indent + "  ", v.start_frame_time);
    s << indent << "end_frame_time: ";
    Printer<double>::stream(s, indent + "  ", v.end_frame_time);
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.joint_names[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_ROS_INTERFACES_MESSAGE_PLANARMTRAJECTORYBEZIERCURVEREQUEST_H
