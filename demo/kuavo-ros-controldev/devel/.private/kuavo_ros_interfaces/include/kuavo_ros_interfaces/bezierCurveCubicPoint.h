// Generated by gencpp from file kuavo_ros_interfaces/bezierCurveCubicPoint.msg
// DO NOT EDIT!


#ifndef KUAVO_ROS_INTERFACES_MESSAGE_BEZIERCURVECUBICPOINT_H
#define KUAVO_ROS_INTERFACES_MESSAGE_BEZIERCURVECUBICPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_ros_interfaces
{
template <class ContainerAllocator>
struct bezierCurveCubicPoint_
{
  typedef bezierCurveCubicPoint_<ContainerAllocator> Type;

  bezierCurveCubicPoint_()
    : end_point()
    , left_control_point()
    , right_control_point()  {
    }
  bezierCurveCubicPoint_(const ContainerAllocator& _alloc)
    : end_point(_alloc)
    , left_control_point(_alloc)
    , right_control_point(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _end_point_type;
  _end_point_type end_point;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _left_control_point_type;
  _left_control_point_type left_control_point;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _right_control_point_type;
  _right_control_point_type right_control_point;





  typedef boost::shared_ptr< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> const> ConstPtr;

}; // struct bezierCurveCubicPoint_

typedef ::kuavo_ros_interfaces::bezierCurveCubicPoint_<std::allocator<void> > bezierCurveCubicPoint;

typedef boost::shared_ptr< ::kuavo_ros_interfaces::bezierCurveCubicPoint > bezierCurveCubicPointPtr;
typedef boost::shared_ptr< ::kuavo_ros_interfaces::bezierCurveCubicPoint const> bezierCurveCubicPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator1> & lhs, const ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator2> & rhs)
{
  return lhs.end_point == rhs.end_point &&
    lhs.left_control_point == rhs.left_control_point &&
    lhs.right_control_point == rhs.right_control_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator1> & lhs, const ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_ros_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4262726b7e41e02a58fb5df3475aa027";
  }

  static const char* value(const ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4262726b7e41e02aULL;
  static const uint64_t static_value2 = 0x58fb5df3475aa027ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_ros_interfaces/bezierCurveCubicPoint";
  }

  static const char* value(const ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# [x, y] x is time, y is value\n"
"\n"
"float64[] end_point\n"
"float64[] left_control_point\n"
"float64[] right_control_point\n"
;
  }

  static const char* value(const ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.end_point);
      stream.next(m.left_control_point);
      stream.next(m.right_control_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bezierCurveCubicPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator>& v)
  {
    s << indent << "end_point[]" << std::endl;
    for (size_t i = 0; i < v.end_point.size(); ++i)
    {
      s << indent << "  end_point[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.end_point[i]);
    }
    s << indent << "left_control_point[]" << std::endl;
    for (size_t i = 0; i < v.left_control_point.size(); ++i)
    {
      s << indent << "  left_control_point[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.left_control_point[i]);
    }
    s << indent << "right_control_point[]" << std::endl;
    for (size_t i = 0; i < v.right_control_point.size(); ++i)
    {
      s << indent << "  right_control_point[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.right_control_point[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_ROS_INTERFACES_MESSAGE_BEZIERCURVECUBICPOINT_H
