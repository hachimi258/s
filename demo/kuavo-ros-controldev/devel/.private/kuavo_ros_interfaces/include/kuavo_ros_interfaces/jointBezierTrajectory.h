// Generated by gencpp from file kuavo_ros_interfaces/jointBezierTrajectory.msg
// DO NOT EDIT!


#ifndef KUAVO_ROS_INTERFACES_MESSAGE_JOINTBEZIERTRAJECTORY_H
#define KUAVO_ROS_INTERFACES_MESSAGE_JOINTBEZIERTRAJECTORY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kuavo_ros_interfaces/bezierCurveCubicPoint.h>

namespace kuavo_ros_interfaces
{
template <class ContainerAllocator>
struct jointBezierTrajectory_
{
  typedef jointBezierTrajectory_<ContainerAllocator> Type;

  jointBezierTrajectory_()
    : bezier_curve_points()  {
    }
  jointBezierTrajectory_(const ContainerAllocator& _alloc)
    : bezier_curve_points(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> >> _bezier_curve_points_type;
  _bezier_curve_points_type bezier_curve_points;





  typedef boost::shared_ptr< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct jointBezierTrajectory_

typedef ::kuavo_ros_interfaces::jointBezierTrajectory_<std::allocator<void> > jointBezierTrajectory;

typedef boost::shared_ptr< ::kuavo_ros_interfaces::jointBezierTrajectory > jointBezierTrajectoryPtr;
typedef boost::shared_ptr< ::kuavo_ros_interfaces::jointBezierTrajectory const> jointBezierTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator1> & lhs, const ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator2> & rhs)
{
  return lhs.bezier_curve_points == rhs.bezier_curve_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator1> & lhs, const ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_ros_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "734a11eb72071b59bdbb297c6a53338c";
  }

  static const char* value(const ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x734a11eb72071b59ULL;
  static const uint64_t static_value2 = 0xbdbb297c6a53338cULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_ros_interfaces/jointBezierTrajectory";
  }

  static const char* value(const ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_ros_interfaces/bezierCurveCubicPoint[] bezier_curve_points\n"
"================================================================================\n"
"MSG: kuavo_ros_interfaces/bezierCurveCubicPoint\n"
"# [x, y] x is time, y is value\n"
"\n"
"float64[] end_point\n"
"float64[] left_control_point\n"
"float64[] right_control_point\n"
;
  }

  static const char* value(const ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bezier_curve_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jointBezierTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_ros_interfaces::jointBezierTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "bezier_curve_points[]" << std::endl;
    for (size_t i = 0; i < v.bezier_curve_points.size(); ++i)
    {
      s << indent << "  bezier_curve_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kuavo_ros_interfaces::bezierCurveCubicPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.bezier_curve_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_ROS_INTERFACES_MESSAGE_JOINTBEZIERTRAJECTORY_H
