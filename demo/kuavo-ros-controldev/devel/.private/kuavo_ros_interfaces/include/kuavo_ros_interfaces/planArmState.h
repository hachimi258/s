// Generated by gencpp from file kuavo_ros_interfaces/planArmState.msg
// DO NOT EDIT!


#ifndef KUAVO_ROS_INTERFACES_MESSAGE_PLANARMSTATE_H
#define KUAVO_ROS_INTERFACES_MESSAGE_PLANARMSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_ros_interfaces
{
template <class ContainerAllocator>
struct planArmState_
{
  typedef planArmState_<ContainerAllocator> Type;

  planArmState_()
    : progress(0)
    , is_finished(false)  {
    }
  planArmState_(const ContainerAllocator& _alloc)
    : progress(0)
    , is_finished(false)  {
  (void)_alloc;
    }



   typedef int32_t _progress_type;
  _progress_type progress;

   typedef uint8_t _is_finished_type;
  _is_finished_type is_finished;





  typedef boost::shared_ptr< ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> const> ConstPtr;

}; // struct planArmState_

typedef ::kuavo_ros_interfaces::planArmState_<std::allocator<void> > planArmState;

typedef boost::shared_ptr< ::kuavo_ros_interfaces::planArmState > planArmStatePtr;
typedef boost::shared_ptr< ::kuavo_ros_interfaces::planArmState const> planArmStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_ros_interfaces::planArmState_<ContainerAllocator1> & lhs, const ::kuavo_ros_interfaces::planArmState_<ContainerAllocator2> & rhs)
{
  return lhs.progress == rhs.progress &&
    lhs.is_finished == rhs.is_finished;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_ros_interfaces::planArmState_<ContainerAllocator1> & lhs, const ::kuavo_ros_interfaces::planArmState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_ros_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0743feb5221b176f512f6ea58920b201";
  }

  static const char* value(const ::kuavo_ros_interfaces::planArmState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0743feb5221b176fULL;
  static const uint64_t static_value2 = 0x512f6ea58920b201ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_ros_interfaces/planArmState";
  }

  static const char* value(const ::kuavo_ros_interfaces::planArmState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 progress\n"
"bool is_finished\n"
;
  }

  static const char* value(const ::kuavo_ros_interfaces::planArmState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.progress);
      stream.next(m.is_finished);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct planArmState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_ros_interfaces::planArmState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_ros_interfaces::planArmState_<ContainerAllocator>& v)
  {
    s << indent << "progress: ";
    Printer<int32_t>::stream(s, indent + "  ", v.progress);
    s << indent << "is_finished: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_finished);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_ROS_INTERFACES_MESSAGE_PLANARMSTATE_H
