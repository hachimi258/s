// Generated by gencpp from file h12pro_controller_node/h12proRemoteControllerChannel.msg
// DO NOT EDIT!


#ifndef H12PRO_CONTROLLER_NODE_MESSAGE_H12PROREMOTECONTROLLERCHANNEL_H
#define H12PRO_CONTROLLER_NODE_MESSAGE_H12PROREMOTECONTROLLERCHANNEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace h12pro_controller_node
{
template <class ContainerAllocator>
struct h12proRemoteControllerChannel_
{
  typedef h12proRemoteControllerChannel_<ContainerAllocator> Type;

  h12proRemoteControllerChannel_()
    : channels()
    , sbus_state(0)  {
    }
  h12proRemoteControllerChannel_(const ContainerAllocator& _alloc)
    : channels(_alloc)
    , sbus_state(0)  {
  (void)_alloc;
    }



   typedef std::vector<uint16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint16_t>> _channels_type;
  _channels_type channels;

   typedef uint8_t _sbus_state_type;
  _sbus_state_type sbus_state;





  typedef boost::shared_ptr< ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> const> ConstPtr;

}; // struct h12proRemoteControllerChannel_

typedef ::h12pro_controller_node::h12proRemoteControllerChannel_<std::allocator<void> > h12proRemoteControllerChannel;

typedef boost::shared_ptr< ::h12pro_controller_node::h12proRemoteControllerChannel > h12proRemoteControllerChannelPtr;
typedef boost::shared_ptr< ::h12pro_controller_node::h12proRemoteControllerChannel const> h12proRemoteControllerChannelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator1> & lhs, const ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator2> & rhs)
{
  return lhs.channels == rhs.channels &&
    lhs.sbus_state == rhs.sbus_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator1> & lhs, const ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace h12pro_controller_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbc04b5769be8336707a1083b8b107dd";
  }

  static const char* value(const ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfbc04b5769be8336ULL;
  static const uint64_t static_value2 = 0x707a1083b8b107ddULL;
};

template<class ContainerAllocator>
struct DataType< ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "h12pro_controller_node/h12proRemoteControllerChannel";
  }

  static const char* value(const ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16[] channels\n"
"uint8 sbus_state\n"
;
  }

  static const char* value(const ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.channels);
      stream.next(m.sbus_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct h12proRemoteControllerChannel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::h12pro_controller_node::h12proRemoteControllerChannel_<ContainerAllocator>& v)
  {
    s << indent << "channels[]" << std::endl;
    for (size_t i = 0; i < v.channels.size(); ++i)
    {
      s << indent << "  channels[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.channels[i]);
    }
    s << indent << "sbus_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sbus_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // H12PRO_CONTROLLER_NODE_MESSAGE_H12PROREMOTECONTROLLERCHANNEL_H
