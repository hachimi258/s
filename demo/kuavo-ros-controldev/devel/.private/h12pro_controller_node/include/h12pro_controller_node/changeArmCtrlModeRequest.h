// Generated by gencpp from file h12pro_controller_node/changeArmCtrlModeRequest.msg
// DO NOT EDIT!


#ifndef H12PRO_CONTROLLER_NODE_MESSAGE_CHANGEARMCTRLMODEREQUEST_H
#define H12PRO_CONTROLLER_NODE_MESSAGE_CHANGEARMCTRLMODEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace h12pro_controller_node
{
template <class ContainerAllocator>
struct changeArmCtrlModeRequest_
{
  typedef changeArmCtrlModeRequest_<ContainerAllocator> Type;

  changeArmCtrlModeRequest_()
    : control_mode(false)  {
    }
  changeArmCtrlModeRequest_(const ContainerAllocator& _alloc)
    : control_mode(false)  {
  (void)_alloc;
    }



   typedef uint8_t _control_mode_type;
  _control_mode_type control_mode;





  typedef boost::shared_ptr< ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct changeArmCtrlModeRequest_

typedef ::h12pro_controller_node::changeArmCtrlModeRequest_<std::allocator<void> > changeArmCtrlModeRequest;

typedef boost::shared_ptr< ::h12pro_controller_node::changeArmCtrlModeRequest > changeArmCtrlModeRequestPtr;
typedef boost::shared_ptr< ::h12pro_controller_node::changeArmCtrlModeRequest const> changeArmCtrlModeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator1> & lhs, const ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.control_mode == rhs.control_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator1> & lhs, const ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace h12pro_controller_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14ef2aa2f48bb3f617c9e71fd0bc444e";
  }

  static const char* value(const ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14ef2aa2f48bb3f6ULL;
  static const uint64_t static_value2 = 0x17c9e71fd0bc444eULL;
};

template<class ContainerAllocator>
struct DataType< ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "h12pro_controller_node/changeArmCtrlModeRequest";
  }

  static const char* value(const ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool control_mode\n"
;
  }

  static const char* value(const ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct changeArmCtrlModeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::h12pro_controller_node::changeArmCtrlModeRequest_<ContainerAllocator>& v)
  {
    s << indent << "control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // H12PRO_CONTROLLER_NODE_MESSAGE_CHANGEARMCTRLMODEREQUEST_H
