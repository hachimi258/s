// Generated by gencpp from file h12pro_controller_node/playmusicRequest.msg
// DO NOT EDIT!


#ifndef H12PRO_CONTROLLER_NODE_MESSAGE_PLAYMUSICREQUEST_H
#define H12PRO_CONTROLLER_NODE_MESSAGE_PLAYMUSICREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace h12pro_controller_node
{
template <class ContainerAllocator>
struct playmusicRequest_
{
  typedef playmusicRequest_<ContainerAllocator> Type;

  playmusicRequest_()
    : music_number()
    , volume(0)  {
    }
  playmusicRequest_(const ContainerAllocator& _alloc)
    : music_number(_alloc)
    , volume(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _music_number_type;
  _music_number_type music_number;

   typedef int64_t _volume_type;
  _volume_type volume;





  typedef boost::shared_ptr< ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> const> ConstPtr;

}; // struct playmusicRequest_

typedef ::h12pro_controller_node::playmusicRequest_<std::allocator<void> > playmusicRequest;

typedef boost::shared_ptr< ::h12pro_controller_node::playmusicRequest > playmusicRequestPtr;
typedef boost::shared_ptr< ::h12pro_controller_node::playmusicRequest const> playmusicRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::h12pro_controller_node::playmusicRequest_<ContainerAllocator1> & lhs, const ::h12pro_controller_node::playmusicRequest_<ContainerAllocator2> & rhs)
{
  return lhs.music_number == rhs.music_number &&
    lhs.volume == rhs.volume;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::h12pro_controller_node::playmusicRequest_<ContainerAllocator1> & lhs, const ::h12pro_controller_node::playmusicRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace h12pro_controller_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4bd61c49344d06e17224a3598f23d8e";
  }

  static const char* value(const ::h12pro_controller_node::playmusicRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4bd61c49344d06eULL;
  static const uint64_t static_value2 = 0x17224a3598f23d8eULL;
};

template<class ContainerAllocator>
struct DataType< ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "h12pro_controller_node/playmusicRequest";
  }

  static const char* value(const ::h12pro_controller_node::playmusicRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string music_number\n"
"int64 volume\n"
;
  }

  static const char* value(const ::h12pro_controller_node::playmusicRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.music_number);
      stream.next(m.volume);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct playmusicRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::h12pro_controller_node::playmusicRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::h12pro_controller_node::playmusicRequest_<ContainerAllocator>& v)
  {
    s << indent << "music_number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.music_number);
    s << indent << "volume: ";
    Printer<int64_t>::stream(s, indent + "  ", v.volume);
  }
};

} // namespace message_operations
} // namespace ros

#endif // H12PRO_CONTROLLER_NODE_MESSAGE_PLAYMUSICREQUEST_H
