// Generated by gencpp from file h12pro_controller_node/srvChangePhasesRequest.msg
// DO NOT EDIT!


#ifndef H12PRO_CONTROLLER_NODE_MESSAGE_SRVCHANGEPHASESREQUEST_H
#define H12PRO_CONTROLLER_NODE_MESSAGE_SRVCHANGEPHASESREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace h12pro_controller_node
{
template <class ContainerAllocator>
struct srvChangePhasesRequest_
{
  typedef srvChangePhasesRequest_<ContainerAllocator> Type;

  srvChangePhasesRequest_()
    : masterID(0)
    , stateReq()
    , subState()  {
    }
  srvChangePhasesRequest_(const ContainerAllocator& _alloc)
    : masterID(0)
    , stateReq(_alloc)
    , subState(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _masterID_type;
  _masterID_type masterID;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _stateReq_type;
  _stateReq_type stateReq;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _subState_type;
  _subState_type subState;





  typedef boost::shared_ptr< ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct srvChangePhasesRequest_

typedef ::h12pro_controller_node::srvChangePhasesRequest_<std::allocator<void> > srvChangePhasesRequest;

typedef boost::shared_ptr< ::h12pro_controller_node::srvChangePhasesRequest > srvChangePhasesRequestPtr;
typedef boost::shared_ptr< ::h12pro_controller_node::srvChangePhasesRequest const> srvChangePhasesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator1> & lhs, const ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.masterID == rhs.masterID &&
    lhs.stateReq == rhs.stateReq &&
    lhs.subState == rhs.subState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator1> & lhs, const ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace h12pro_controller_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ca8c109297a3bc861ef8e95237d0baf";
  }

  static const char* value(const ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ca8c109297a3bc8ULL;
  static const uint64_t static_value2 = 0x61ef8e95237d0bafULL;
};

template<class ContainerAllocator>
struct DataType< ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "h12pro_controller_node/srvChangePhasesRequest";
  }

  static const char* value(const ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 masterID\n"
"string stateReq\n"
"string subState\n"
;
  }

  static const char* value(const ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.masterID);
      stream.next(m.stateReq);
      stream.next(m.subState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srvChangePhasesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::h12pro_controller_node::srvChangePhasesRequest_<ContainerAllocator>& v)
  {
    s << indent << "masterID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.masterID);
    s << indent << "stateReq: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.stateReq);
    s << indent << "subState: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.subState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // H12PRO_CONTROLLER_NODE_MESSAGE_SRVCHANGEPHASESREQUEST_H
