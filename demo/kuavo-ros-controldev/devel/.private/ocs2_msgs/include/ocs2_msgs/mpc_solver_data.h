// Generated by gencpp from file ocs2_msgs/mpc_solver_data.msg
// DO NOT EDIT!


#ifndef OCS2_MSGS_MESSAGE_MPC_SOLVER_DATA_H
#define OCS2_MSGS_MESSAGE_MPC_SOLVER_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ocs2_msgs/mode_schedule.h>
#include <ocs2_msgs/mpc_target_trajectories.h>
#include <ocs2_msgs/mpc_flattened_controller.h>

namespace ocs2_msgs
{
template <class ContainerAllocator>
struct mpc_solver_data_
{
  typedef mpc_solver_data_<ContainerAllocator> Type;

  mpc_solver_data_()
    : initTime(0.0)
    , initState()
    , finalTime(0.0)
    , modeSchedule()
    , targetTrajectories()
    , mpc_flattened_controller()
    , swingPlannerMultipliers()  {
    }
  mpc_solver_data_(const ContainerAllocator& _alloc)
    : initTime(0.0)
    , initState(_alloc)
    , finalTime(0.0)
    , modeSchedule(_alloc)
    , targetTrajectories(_alloc)
    , mpc_flattened_controller(_alloc)
    , swingPlannerMultipliers(_alloc)  {
  (void)_alloc;
    }



   typedef double _initTime_type;
  _initTime_type initTime;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _initState_type;
  _initState_type initState;

   typedef double _finalTime_type;
  _finalTime_type finalTime;

   typedef  ::ocs2_msgs::mode_schedule_<ContainerAllocator>  _modeSchedule_type;
  _modeSchedule_type modeSchedule;

   typedef  ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator>  _targetTrajectories_type;
  _targetTrajectories_type targetTrajectories;

   typedef  ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator>  _mpc_flattened_controller_type;
  _mpc_flattened_controller_type mpc_flattened_controller;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _swingPlannerMultipliers_type;
  _swingPlannerMultipliers_type swingPlannerMultipliers;





  typedef boost::shared_ptr< ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> const> ConstPtr;

}; // struct mpc_solver_data_

typedef ::ocs2_msgs::mpc_solver_data_<std::allocator<void> > mpc_solver_data;

typedef boost::shared_ptr< ::ocs2_msgs::mpc_solver_data > mpc_solver_dataPtr;
typedef boost::shared_ptr< ::ocs2_msgs::mpc_solver_data const> mpc_solver_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ocs2_msgs::mpc_solver_data_<ContainerAllocator1> & lhs, const ::ocs2_msgs::mpc_solver_data_<ContainerAllocator2> & rhs)
{
  return lhs.initTime == rhs.initTime &&
    lhs.initState == rhs.initState &&
    lhs.finalTime == rhs.finalTime &&
    lhs.modeSchedule == rhs.modeSchedule &&
    lhs.targetTrajectories == rhs.targetTrajectories &&
    lhs.mpc_flattened_controller == rhs.mpc_flattened_controller &&
    lhs.swingPlannerMultipliers == rhs.swingPlannerMultipliers;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ocs2_msgs::mpc_solver_data_<ContainerAllocator1> & lhs, const ::ocs2_msgs::mpc_solver_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ocs2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d8e9cf6f256a05764e6ff2f6f246a7f";
  }

  static const char* value(const ::ocs2_msgs::mpc_solver_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d8e9cf6f256a057ULL;
  static const uint64_t static_value2 = 0x64e6ff2f6f246a7fULL;
};

template<class ContainerAllocator>
struct DataType< ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ocs2_msgs/mpc_solver_data";
  }

  static const char* value(const ::ocs2_msgs::mpc_solver_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 initTime           # 对应 scalar_t initTime_\n"
"float64[] initState        # 对应 vector_t initState_\n"
"float64 finalTime          # 对应 scalar_t finalTime_\n"
"\n"
"# ModeSchedule 和 TargetTrajectories \n"
"mode_schedule modeSchedule\n"
"mpc_target_trajectories targetTrajectories\n"
"\n"
"# 包含 PrimalSolution \n"
"mpc_flattened_controller mpc_flattened_controller\n"
"\n"
"# swingplanner存储的swingPlannerMultipliers\n"
"float64[] swingPlannerMultipliers\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mode_schedule\n"
"# MPC mode sequence\n"
"\n"
"float64[] eventTimes           # event times: its size is equal to the size of phaseSequence minus one\n"
"int8[]    modeSequence         # mode sequence: e.g., for a quadrupedal robot, it is in the set {0, 1,..., 15}\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_target_trajectories\n"
"# MPC target trajectories\n"
"\n"
"float64[]    timeTrajectory        # MPC target time trajectory\n"
"mpc_state[]  stateTrajectory       # MPC target state trajectory\n"
"mpc_input[]  inputTrajectory       # MPC target input trajectory\n"
"\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_state\n"
"# MPC internal model state vector\n"
"float32[] value\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_input\n"
"# MPC internal model input vector \n"
"\n"
"float32[] value\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_flattened_controller\n"
"# Flattened controller: A serialized controller\n"
"\n"
"# define controllerType Enum values\n"
"uint8 CONTROLLER_UNKNOWN=0 # safety mechanism: message initalization to zero\n"
"uint8 CONTROLLER_FEEDFORWARD=1\n"
"uint8 CONTROLLER_LINEAR=2\n"
"\n"
"uint8                   controllerType         # what type of controller is this\n"
"\n"
"mpc_observation         initObservation        # plan initial observation\n"
"\n"
"mpc_target_trajectories planTargetTrajectories # target trajectory in cost function\n"
"mpc_state[]             stateTrajectory        # optimized state trajectory from planner\n"
"mpc_input[]             inputTrajectory        # optimized input trajectory from planner\n"
"float64[]               timeTrajectory         # time trajectory for stateTrajectory and inputTrajectory\n"
"uint16[]                postEventIndices       # array of indices indicating the index of post-event time in the trajectories\n"
"mode_schedule           modeSchedule           # optimal/predefined MPC mode sequence and event times\n"
"\n"
"controller_data[]       data                   # the actual payload from flatten method: one vector of data per time step\n"
"\n"
"mpc_performance_indices performanceIndices     # solver performance indices\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_observation\n"
"# MPC observation\n"
"float64        time        # Current time\n"
"mpc_state      state       # Current state\n"
"mpc_input      input       # Current input\n"
"int8           mode        # Current mode\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/controller_data\n"
"float32[] data\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_performance_indices\n"
"# MPC performance indices\n"
"float32     initTime\n"
"float32     merit\n"
"float32     cost\n"
"float32     dynamicsViolationSSE\n"
"float32     equalityConstraintsSSE\n"
"float32     equalityLagrangian\n"
"float32     inequalityLagrangian\n"
;
  }

  static const char* value(const ::ocs2_msgs::mpc_solver_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.initTime);
      stream.next(m.initState);
      stream.next(m.finalTime);
      stream.next(m.modeSchedule);
      stream.next(m.targetTrajectories);
      stream.next(m.mpc_flattened_controller);
      stream.next(m.swingPlannerMultipliers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mpc_solver_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ocs2_msgs::mpc_solver_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ocs2_msgs::mpc_solver_data_<ContainerAllocator>& v)
  {
    s << indent << "initTime: ";
    Printer<double>::stream(s, indent + "  ", v.initTime);
    s << indent << "initState[]" << std::endl;
    for (size_t i = 0; i < v.initState.size(); ++i)
    {
      s << indent << "  initState[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.initState[i]);
    }
    s << indent << "finalTime: ";
    Printer<double>::stream(s, indent + "  ", v.finalTime);
    s << indent << "modeSchedule: ";
    s << std::endl;
    Printer< ::ocs2_msgs::mode_schedule_<ContainerAllocator> >::stream(s, indent + "  ", v.modeSchedule);
    s << indent << "targetTrajectories: ";
    s << std::endl;
    Printer< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> >::stream(s, indent + "  ", v.targetTrajectories);
    s << indent << "mpc_flattened_controller: ";
    s << std::endl;
    Printer< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> >::stream(s, indent + "  ", v.mpc_flattened_controller);
    s << indent << "swingPlannerMultipliers[]" << std::endl;
    for (size_t i = 0; i < v.swingPlannerMultipliers.size(); ++i)
    {
      s << indent << "  swingPlannerMultipliers[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.swingPlannerMultipliers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCS2_MSGS_MESSAGE_MPC_SOLVER_DATA_H
