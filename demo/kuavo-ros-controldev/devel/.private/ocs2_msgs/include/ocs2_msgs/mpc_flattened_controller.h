// Generated by gencpp from file ocs2_msgs/mpc_flattened_controller.msg
// DO NOT EDIT!


#ifndef OCS2_MSGS_MESSAGE_MPC_FLATTENED_CONTROLLER_H
#define OCS2_MSGS_MESSAGE_MPC_FLATTENED_CONTROLLER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ocs2_msgs/mpc_observation.h>
#include <ocs2_msgs/mpc_target_trajectories.h>
#include <ocs2_msgs/mpc_state.h>
#include <ocs2_msgs/mpc_input.h>
#include <ocs2_msgs/mode_schedule.h>
#include <ocs2_msgs/controller_data.h>
#include <ocs2_msgs/mpc_performance_indices.h>

namespace ocs2_msgs
{
template <class ContainerAllocator>
struct mpc_flattened_controller_
{
  typedef mpc_flattened_controller_<ContainerAllocator> Type;

  mpc_flattened_controller_()
    : controllerType(0)
    , initObservation()
    , planTargetTrajectories()
    , stateTrajectory()
    , inputTrajectory()
    , timeTrajectory()
    , postEventIndices()
    , modeSchedule()
    , data()
    , performanceIndices()  {
    }
  mpc_flattened_controller_(const ContainerAllocator& _alloc)
    : controllerType(0)
    , initObservation(_alloc)
    , planTargetTrajectories(_alloc)
    , stateTrajectory(_alloc)
    , inputTrajectory(_alloc)
    , timeTrajectory(_alloc)
    , postEventIndices(_alloc)
    , modeSchedule(_alloc)
    , data(_alloc)
    , performanceIndices(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _controllerType_type;
  _controllerType_type controllerType;

   typedef  ::ocs2_msgs::mpc_observation_<ContainerAllocator>  _initObservation_type;
  _initObservation_type initObservation;

   typedef  ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator>  _planTargetTrajectories_type;
  _planTargetTrajectories_type planTargetTrajectories;

   typedef std::vector< ::ocs2_msgs::mpc_state_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ocs2_msgs::mpc_state_<ContainerAllocator> >> _stateTrajectory_type;
  _stateTrajectory_type stateTrajectory;

   typedef std::vector< ::ocs2_msgs::mpc_input_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ocs2_msgs::mpc_input_<ContainerAllocator> >> _inputTrajectory_type;
  _inputTrajectory_type inputTrajectory;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _timeTrajectory_type;
  _timeTrajectory_type timeTrajectory;

   typedef std::vector<uint16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint16_t>> _postEventIndices_type;
  _postEventIndices_type postEventIndices;

   typedef  ::ocs2_msgs::mode_schedule_<ContainerAllocator>  _modeSchedule_type;
  _modeSchedule_type modeSchedule;

   typedef std::vector< ::ocs2_msgs::controller_data_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ocs2_msgs::controller_data_<ContainerAllocator> >> _data_type;
  _data_type data;

   typedef  ::ocs2_msgs::mpc_performance_indices_<ContainerAllocator>  _performanceIndices_type;
  _performanceIndices_type performanceIndices;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CONTROLLER_UNKNOWN)
  #undef CONTROLLER_UNKNOWN
#endif
#if defined(_WIN32) && defined(CONTROLLER_FEEDFORWARD)
  #undef CONTROLLER_FEEDFORWARD
#endif
#if defined(_WIN32) && defined(CONTROLLER_LINEAR)
  #undef CONTROLLER_LINEAR
#endif

  enum {
    CONTROLLER_UNKNOWN = 0u,
    CONTROLLER_FEEDFORWARD = 1u,
    CONTROLLER_LINEAR = 2u,
  };


  typedef boost::shared_ptr< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> const> ConstPtr;

}; // struct mpc_flattened_controller_

typedef ::ocs2_msgs::mpc_flattened_controller_<std::allocator<void> > mpc_flattened_controller;

typedef boost::shared_ptr< ::ocs2_msgs::mpc_flattened_controller > mpc_flattened_controllerPtr;
typedef boost::shared_ptr< ::ocs2_msgs::mpc_flattened_controller const> mpc_flattened_controllerConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator1> & lhs, const ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator2> & rhs)
{
  return lhs.controllerType == rhs.controllerType &&
    lhs.initObservation == rhs.initObservation &&
    lhs.planTargetTrajectories == rhs.planTargetTrajectories &&
    lhs.stateTrajectory == rhs.stateTrajectory &&
    lhs.inputTrajectory == rhs.inputTrajectory &&
    lhs.timeTrajectory == rhs.timeTrajectory &&
    lhs.postEventIndices == rhs.postEventIndices &&
    lhs.modeSchedule == rhs.modeSchedule &&
    lhs.data == rhs.data &&
    lhs.performanceIndices == rhs.performanceIndices;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator1> & lhs, const ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ocs2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9355aadb2928f436a41799dd737c0f53";
  }

  static const char* value(const ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9355aadb2928f436ULL;
  static const uint64_t static_value2 = 0xa41799dd737c0f53ULL;
};

template<class ContainerAllocator>
struct DataType< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ocs2_msgs/mpc_flattened_controller";
  }

  static const char* value(const ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Flattened controller: A serialized controller\n"
"\n"
"# define controllerType Enum values\n"
"uint8 CONTROLLER_UNKNOWN=0 # safety mechanism: message initalization to zero\n"
"uint8 CONTROLLER_FEEDFORWARD=1\n"
"uint8 CONTROLLER_LINEAR=2\n"
"\n"
"uint8                   controllerType         # what type of controller is this\n"
"\n"
"mpc_observation         initObservation        # plan initial observation\n"
"\n"
"mpc_target_trajectories planTargetTrajectories # target trajectory in cost function\n"
"mpc_state[]             stateTrajectory        # optimized state trajectory from planner\n"
"mpc_input[]             inputTrajectory        # optimized input trajectory from planner\n"
"float64[]               timeTrajectory         # time trajectory for stateTrajectory and inputTrajectory\n"
"uint16[]                postEventIndices       # array of indices indicating the index of post-event time in the trajectories\n"
"mode_schedule           modeSchedule           # optimal/predefined MPC mode sequence and event times\n"
"\n"
"controller_data[]       data                   # the actual payload from flatten method: one vector of data per time step\n"
"\n"
"mpc_performance_indices performanceIndices     # solver performance indices\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_observation\n"
"# MPC observation\n"
"float64        time        # Current time\n"
"mpc_state      state       # Current state\n"
"mpc_input      input       # Current input\n"
"int8           mode        # Current mode\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_state\n"
"# MPC internal model state vector\n"
"float32[] value\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_input\n"
"# MPC internal model input vector \n"
"\n"
"float32[] value\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_target_trajectories\n"
"# MPC target trajectories\n"
"\n"
"float64[]    timeTrajectory        # MPC target time trajectory\n"
"mpc_state[]  stateTrajectory       # MPC target state trajectory\n"
"mpc_input[]  inputTrajectory       # MPC target input trajectory\n"
"\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mode_schedule\n"
"# MPC mode sequence\n"
"\n"
"float64[] eventTimes           # event times: its size is equal to the size of phaseSequence minus one\n"
"int8[]    modeSequence         # mode sequence: e.g., for a quadrupedal robot, it is in the set {0, 1,..., 15}\n"
"================================================================================\n"
"MSG: ocs2_msgs/controller_data\n"
"float32[] data\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_performance_indices\n"
"# MPC performance indices\n"
"float32     initTime\n"
"float32     merit\n"
"float32     cost\n"
"float32     dynamicsViolationSSE\n"
"float32     equalityConstraintsSSE\n"
"float32     equalityLagrangian\n"
"float32     inequalityLagrangian\n"
;
  }

  static const char* value(const ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.controllerType);
      stream.next(m.initObservation);
      stream.next(m.planTargetTrajectories);
      stream.next(m.stateTrajectory);
      stream.next(m.inputTrajectory);
      stream.next(m.timeTrajectory);
      stream.next(m.postEventIndices);
      stream.next(m.modeSchedule);
      stream.next(m.data);
      stream.next(m.performanceIndices);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mpc_flattened_controller_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ocs2_msgs::mpc_flattened_controller_<ContainerAllocator>& v)
  {
    s << indent << "controllerType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.controllerType);
    s << indent << "initObservation: ";
    s << std::endl;
    Printer< ::ocs2_msgs::mpc_observation_<ContainerAllocator> >::stream(s, indent + "  ", v.initObservation);
    s << indent << "planTargetTrajectories: ";
    s << std::endl;
    Printer< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> >::stream(s, indent + "  ", v.planTargetTrajectories);
    s << indent << "stateTrajectory[]" << std::endl;
    for (size_t i = 0; i < v.stateTrajectory.size(); ++i)
    {
      s << indent << "  stateTrajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ocs2_msgs::mpc_state_<ContainerAllocator> >::stream(s, indent + "    ", v.stateTrajectory[i]);
    }
    s << indent << "inputTrajectory[]" << std::endl;
    for (size_t i = 0; i < v.inputTrajectory.size(); ++i)
    {
      s << indent << "  inputTrajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ocs2_msgs::mpc_input_<ContainerAllocator> >::stream(s, indent + "    ", v.inputTrajectory[i]);
    }
    s << indent << "timeTrajectory[]" << std::endl;
    for (size_t i = 0; i < v.timeTrajectory.size(); ++i)
    {
      s << indent << "  timeTrajectory[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.timeTrajectory[i]);
    }
    s << indent << "postEventIndices[]" << std::endl;
    for (size_t i = 0; i < v.postEventIndices.size(); ++i)
    {
      s << indent << "  postEventIndices[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.postEventIndices[i]);
    }
    s << indent << "modeSchedule: ";
    s << std::endl;
    Printer< ::ocs2_msgs::mode_schedule_<ContainerAllocator> >::stream(s, indent + "  ", v.modeSchedule);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ocs2_msgs::controller_data_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
    s << indent << "performanceIndices: ";
    s << std::endl;
    Printer< ::ocs2_msgs::mpc_performance_indices_<ContainerAllocator> >::stream(s, indent + "  ", v.performanceIndices);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCS2_MSGS_MESSAGE_MPC_FLATTENED_CONTROLLER_H
