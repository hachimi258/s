// Generated by gencpp from file ocs2_msgs/lagrangian_metrics.msg
// DO NOT EDIT!


#ifndef OCS2_MSGS_MESSAGE_LAGRANGIAN_METRICS_H
#define OCS2_MSGS_MESSAGE_LAGRANGIAN_METRICS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ocs2_msgs
{
template <class ContainerAllocator>
struct lagrangian_metrics_
{
  typedef lagrangian_metrics_<ContainerAllocator> Type;

  lagrangian_metrics_()
    : time(0.0)
    , penalty(0.0)
    , constraint()  {
    }
  lagrangian_metrics_(const ContainerAllocator& _alloc)
    : time(0.0)
    , penalty(0.0)
    , constraint(_alloc)  {
  (void)_alloc;
    }



   typedef float _time_type;
  _time_type time;

   typedef float _penalty_type;
  _penalty_type penalty;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _constraint_type;
  _constraint_type constraint;





  typedef boost::shared_ptr< ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> const> ConstPtr;

}; // struct lagrangian_metrics_

typedef ::ocs2_msgs::lagrangian_metrics_<std::allocator<void> > lagrangian_metrics;

typedef boost::shared_ptr< ::ocs2_msgs::lagrangian_metrics > lagrangian_metricsPtr;
typedef boost::shared_ptr< ::ocs2_msgs::lagrangian_metrics const> lagrangian_metricsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator1> & lhs, const ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.penalty == rhs.penalty &&
    lhs.constraint == rhs.constraint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator1> & lhs, const ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ocs2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1734f3665afb7d38e9db59de18711863";
  }

  static const char* value(const ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1734f3665afb7d38ULL;
  static const uint64_t static_value2 = 0xe9db59de18711863ULL;
};

template<class ContainerAllocator>
struct DataType< ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ocs2_msgs/lagrangian_metrics";
  }

  static const char* value(const ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MPC Lagrangian metrics\n"
"\n"
"float32   time\n"
"float32   penalty\n"
"float32[] constraint\n"
;
  }

  static const char* value(const ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.penalty);
      stream.next(m.constraint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lagrangian_metrics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ocs2_msgs::lagrangian_metrics_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "penalty: ";
    Printer<float>::stream(s, indent + "  ", v.penalty);
    s << indent << "constraint[]" << std::endl;
    for (size_t i = 0; i < v.constraint.size(); ++i)
    {
      s << indent << "  constraint[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.constraint[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCS2_MSGS_MESSAGE_LAGRANGIAN_METRICS_H
