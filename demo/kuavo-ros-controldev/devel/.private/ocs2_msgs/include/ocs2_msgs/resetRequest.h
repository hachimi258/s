// Generated by gencpp from file ocs2_msgs/resetRequest.msg
// DO NOT EDIT!


#ifndef OCS2_MSGS_MESSAGE_RESETREQUEST_H
#define OCS2_MSGS_MESSAGE_RESETREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ocs2_msgs/mpc_target_trajectories.h>

namespace ocs2_msgs
{
template <class ContainerAllocator>
struct resetRequest_
{
  typedef resetRequest_<ContainerAllocator> Type;

  resetRequest_()
    : reset(false)
    , targetTrajectories()  {
    }
  resetRequest_(const ContainerAllocator& _alloc)
    : reset(false)
    , targetTrajectories(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _reset_type;
  _reset_type reset;

   typedef  ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator>  _targetTrajectories_type;
  _targetTrajectories_type targetTrajectories;





  typedef boost::shared_ptr< ::ocs2_msgs::resetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ocs2_msgs::resetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct resetRequest_

typedef ::ocs2_msgs::resetRequest_<std::allocator<void> > resetRequest;

typedef boost::shared_ptr< ::ocs2_msgs::resetRequest > resetRequestPtr;
typedef boost::shared_ptr< ::ocs2_msgs::resetRequest const> resetRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ocs2_msgs::resetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ocs2_msgs::resetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ocs2_msgs::resetRequest_<ContainerAllocator1> & lhs, const ::ocs2_msgs::resetRequest_<ContainerAllocator2> & rhs)
{
  return lhs.reset == rhs.reset &&
    lhs.targetTrajectories == rhs.targetTrajectories;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ocs2_msgs::resetRequest_<ContainerAllocator1> & lhs, const ::ocs2_msgs::resetRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ocs2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ocs2_msgs::resetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ocs2_msgs::resetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ocs2_msgs::resetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ocs2_msgs::resetRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ocs2_msgs::resetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ocs2_msgs::resetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ocs2_msgs::resetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7759e1cea687346062f2674a13fe14ee";
  }

  static const char* value(const ::ocs2_msgs::resetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7759e1cea6873460ULL;
  static const uint64_t static_value2 = 0x62f2674a13fe14eeULL;
};

template<class ContainerAllocator>
struct DataType< ::ocs2_msgs::resetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ocs2_msgs/resetRequest";
  }

  static const char* value(const ::ocs2_msgs::resetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ocs2_msgs::resetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Reset service \n"
"bool                      reset\n"
"mpc_target_trajectories   targetTrajectories\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_target_trajectories\n"
"# MPC target trajectories\n"
"\n"
"float64[]    timeTrajectory        # MPC target time trajectory\n"
"mpc_state[]  stateTrajectory       # MPC target state trajectory\n"
"mpc_input[]  inputTrajectory       # MPC target input trajectory\n"
"\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_state\n"
"# MPC internal model state vector\n"
"float32[] value\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_input\n"
"# MPC internal model input vector \n"
"\n"
"float32[] value\n"
;
  }

  static const char* value(const ::ocs2_msgs::resetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ocs2_msgs::resetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reset);
      stream.next(m.targetTrajectories);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct resetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ocs2_msgs::resetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ocs2_msgs::resetRequest_<ContainerAllocator>& v)
  {
    s << indent << "reset: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset);
    s << indent << "targetTrajectories: ";
    s << std::endl;
    Printer< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> >::stream(s, indent + "  ", v.targetTrajectories);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCS2_MSGS_MESSAGE_RESETREQUEST_H
