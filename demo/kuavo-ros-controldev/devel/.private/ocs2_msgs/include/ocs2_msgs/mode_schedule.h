// Generated by gencpp from file ocs2_msgs/mode_schedule.msg
// DO NOT EDIT!


#ifndef OCS2_MSGS_MESSAGE_MODE_SCHEDULE_H
#define OCS2_MSGS_MESSAGE_MODE_SCHEDULE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ocs2_msgs
{
template <class ContainerAllocator>
struct mode_schedule_
{
  typedef mode_schedule_<ContainerAllocator> Type;

  mode_schedule_()
    : eventTimes()
    , modeSequence()  {
    }
  mode_schedule_(const ContainerAllocator& _alloc)
    : eventTimes(_alloc)
    , modeSequence(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _eventTimes_type;
  _eventTimes_type eventTimes;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _modeSequence_type;
  _modeSequence_type modeSequence;





  typedef boost::shared_ptr< ::ocs2_msgs::mode_schedule_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ocs2_msgs::mode_schedule_<ContainerAllocator> const> ConstPtr;

}; // struct mode_schedule_

typedef ::ocs2_msgs::mode_schedule_<std::allocator<void> > mode_schedule;

typedef boost::shared_ptr< ::ocs2_msgs::mode_schedule > mode_schedulePtr;
typedef boost::shared_ptr< ::ocs2_msgs::mode_schedule const> mode_scheduleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ocs2_msgs::mode_schedule_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ocs2_msgs::mode_schedule_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ocs2_msgs::mode_schedule_<ContainerAllocator1> & lhs, const ::ocs2_msgs::mode_schedule_<ContainerAllocator2> & rhs)
{
  return lhs.eventTimes == rhs.eventTimes &&
    lhs.modeSequence == rhs.modeSequence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ocs2_msgs::mode_schedule_<ContainerAllocator1> & lhs, const ::ocs2_msgs::mode_schedule_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ocs2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ocs2_msgs::mode_schedule_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ocs2_msgs::mode_schedule_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ocs2_msgs::mode_schedule_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ocs2_msgs::mode_schedule_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ocs2_msgs::mode_schedule_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ocs2_msgs::mode_schedule_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ocs2_msgs::mode_schedule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9aa75d28b36c292b797e36e87614038a";
  }

  static const char* value(const ::ocs2_msgs::mode_schedule_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9aa75d28b36c292bULL;
  static const uint64_t static_value2 = 0x797e36e87614038aULL;
};

template<class ContainerAllocator>
struct DataType< ::ocs2_msgs::mode_schedule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ocs2_msgs/mode_schedule";
  }

  static const char* value(const ::ocs2_msgs::mode_schedule_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ocs2_msgs::mode_schedule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MPC mode sequence\n"
"\n"
"float64[] eventTimes           # event times: its size is equal to the size of phaseSequence minus one\n"
"int8[]    modeSequence         # mode sequence: e.g., for a quadrupedal robot, it is in the set {0, 1,..., 15}\n"
;
  }

  static const char* value(const ::ocs2_msgs::mode_schedule_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ocs2_msgs::mode_schedule_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.eventTimes);
      stream.next(m.modeSequence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mode_schedule_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ocs2_msgs::mode_schedule_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ocs2_msgs::mode_schedule_<ContainerAllocator>& v)
  {
    s << indent << "eventTimes[]" << std::endl;
    for (size_t i = 0; i < v.eventTimes.size(); ++i)
    {
      s << indent << "  eventTimes[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.eventTimes[i]);
    }
    s << indent << "modeSequence[]" << std::endl;
    for (size_t i = 0; i < v.modeSequence.size(); ++i)
    {
      s << indent << "  modeSequence[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.modeSequence[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCS2_MSGS_MESSAGE_MODE_SCHEDULE_H
