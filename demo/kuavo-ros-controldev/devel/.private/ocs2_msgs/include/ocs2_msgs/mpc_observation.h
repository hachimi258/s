// Generated by gencpp from file ocs2_msgs/mpc_observation.msg
// DO NOT EDIT!


#ifndef OCS2_MSGS_MESSAGE_MPC_OBSERVATION_H
#define OCS2_MSGS_MESSAGE_MPC_OBSERVATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ocs2_msgs/mpc_state.h>
#include <ocs2_msgs/mpc_input.h>

namespace ocs2_msgs
{
template <class ContainerAllocator>
struct mpc_observation_
{
  typedef mpc_observation_<ContainerAllocator> Type;

  mpc_observation_()
    : time(0.0)
    , state()
    , input()
    , mode(0)  {
    }
  mpc_observation_(const ContainerAllocator& _alloc)
    : time(0.0)
    , state(_alloc)
    , input(_alloc)
    , mode(0)  {
  (void)_alloc;
    }



   typedef double _time_type;
  _time_type time;

   typedef  ::ocs2_msgs::mpc_state_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef  ::ocs2_msgs::mpc_input_<ContainerAllocator>  _input_type;
  _input_type input;

   typedef int8_t _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::ocs2_msgs::mpc_observation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ocs2_msgs::mpc_observation_<ContainerAllocator> const> ConstPtr;

}; // struct mpc_observation_

typedef ::ocs2_msgs::mpc_observation_<std::allocator<void> > mpc_observation;

typedef boost::shared_ptr< ::ocs2_msgs::mpc_observation > mpc_observationPtr;
typedef boost::shared_ptr< ::ocs2_msgs::mpc_observation const> mpc_observationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ocs2_msgs::mpc_observation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ocs2_msgs::mpc_observation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ocs2_msgs::mpc_observation_<ContainerAllocator1> & lhs, const ::ocs2_msgs::mpc_observation_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.state == rhs.state &&
    lhs.input == rhs.input &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ocs2_msgs::mpc_observation_<ContainerAllocator1> & lhs, const ::ocs2_msgs::mpc_observation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ocs2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ocs2_msgs::mpc_observation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ocs2_msgs::mpc_observation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ocs2_msgs::mpc_observation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ocs2_msgs::mpc_observation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ocs2_msgs::mpc_observation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ocs2_msgs::mpc_observation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ocs2_msgs::mpc_observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4075a25799f2a89c6d62b26e93cb66f";
  }

  static const char* value(const ::ocs2_msgs::mpc_observation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4075a25799f2a89ULL;
  static const uint64_t static_value2 = 0xc6d62b26e93cb66fULL;
};

template<class ContainerAllocator>
struct DataType< ::ocs2_msgs::mpc_observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ocs2_msgs/mpc_observation";
  }

  static const char* value(const ::ocs2_msgs::mpc_observation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ocs2_msgs::mpc_observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MPC observation\n"
"float64        time        # Current time\n"
"mpc_state      state       # Current state\n"
"mpc_input      input       # Current input\n"
"int8           mode        # Current mode\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_state\n"
"# MPC internal model state vector\n"
"float32[] value\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_input\n"
"# MPC internal model input vector \n"
"\n"
"float32[] value\n"
;
  }

  static const char* value(const ::ocs2_msgs::mpc_observation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ocs2_msgs::mpc_observation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.state);
      stream.next(m.input);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mpc_observation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ocs2_msgs::mpc_observation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ocs2_msgs::mpc_observation_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "state: ";
    s << std::endl;
    Printer< ::ocs2_msgs::mpc_state_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "input: ";
    s << std::endl;
    Printer< ::ocs2_msgs::mpc_input_<ContainerAllocator> >::stream(s, indent + "  ", v.input);
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCS2_MSGS_MESSAGE_MPC_OBSERVATION_H
