// Generated by gencpp from file ocs2_msgs/mpc_target_trajectories.msg
// DO NOT EDIT!


#ifndef OCS2_MSGS_MESSAGE_MPC_TARGET_TRAJECTORIES_H
#define OCS2_MSGS_MESSAGE_MPC_TARGET_TRAJECTORIES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ocs2_msgs/mpc_state.h>
#include <ocs2_msgs/mpc_input.h>

namespace ocs2_msgs
{
template <class ContainerAllocator>
struct mpc_target_trajectories_
{
  typedef mpc_target_trajectories_<ContainerAllocator> Type;

  mpc_target_trajectories_()
    : timeTrajectory()
    , stateTrajectory()
    , inputTrajectory()  {
    }
  mpc_target_trajectories_(const ContainerAllocator& _alloc)
    : timeTrajectory(_alloc)
    , stateTrajectory(_alloc)
    , inputTrajectory(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _timeTrajectory_type;
  _timeTrajectory_type timeTrajectory;

   typedef std::vector< ::ocs2_msgs::mpc_state_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ocs2_msgs::mpc_state_<ContainerAllocator> >> _stateTrajectory_type;
  _stateTrajectory_type stateTrajectory;

   typedef std::vector< ::ocs2_msgs::mpc_input_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ocs2_msgs::mpc_input_<ContainerAllocator> >> _inputTrajectory_type;
  _inputTrajectory_type inputTrajectory;





  typedef boost::shared_ptr< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> const> ConstPtr;

}; // struct mpc_target_trajectories_

typedef ::ocs2_msgs::mpc_target_trajectories_<std::allocator<void> > mpc_target_trajectories;

typedef boost::shared_ptr< ::ocs2_msgs::mpc_target_trajectories > mpc_target_trajectoriesPtr;
typedef boost::shared_ptr< ::ocs2_msgs::mpc_target_trajectories const> mpc_target_trajectoriesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator1> & lhs, const ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator2> & rhs)
{
  return lhs.timeTrajectory == rhs.timeTrajectory &&
    lhs.stateTrajectory == rhs.stateTrajectory &&
    lhs.inputTrajectory == rhs.inputTrajectory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator1> & lhs, const ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ocs2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d8da69ddfcd018a998edad053f8c7b6";
  }

  static const char* value(const ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d8da69ddfcd018aULL;
  static const uint64_t static_value2 = 0x998edad053f8c7b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ocs2_msgs/mpc_target_trajectories";
  }

  static const char* value(const ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MPC target trajectories\n"
"\n"
"float64[]    timeTrajectory        # MPC target time trajectory\n"
"mpc_state[]  stateTrajectory       # MPC target state trajectory\n"
"mpc_input[]  inputTrajectory       # MPC target input trajectory\n"
"\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_state\n"
"# MPC internal model state vector\n"
"float32[] value\n"
"\n"
"================================================================================\n"
"MSG: ocs2_msgs/mpc_input\n"
"# MPC internal model input vector \n"
"\n"
"float32[] value\n"
;
  }

  static const char* value(const ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeTrajectory);
      stream.next(m.stateTrajectory);
      stream.next(m.inputTrajectory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mpc_target_trajectories_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ocs2_msgs::mpc_target_trajectories_<ContainerAllocator>& v)
  {
    s << indent << "timeTrajectory[]" << std::endl;
    for (size_t i = 0; i < v.timeTrajectory.size(); ++i)
    {
      s << indent << "  timeTrajectory[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.timeTrajectory[i]);
    }
    s << indent << "stateTrajectory[]" << std::endl;
    for (size_t i = 0; i < v.stateTrajectory.size(); ++i)
    {
      s << indent << "  stateTrajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ocs2_msgs::mpc_state_<ContainerAllocator> >::stream(s, indent + "    ", v.stateTrajectory[i]);
    }
    s << indent << "inputTrajectory[]" << std::endl;
    for (size_t i = 0; i < v.inputTrajectory.size(); ++i)
    {
      s << indent << "  inputTrajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ocs2_msgs::mpc_input_<ContainerAllocator> >::stream(s, indent + "    ", v.inputTrajectory[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCS2_MSGS_MESSAGE_MPC_TARGET_TRAJECTORIES_H
