// Generated by gencpp from file kuavo_msgs/ikSolveError.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_IKSOLVEERROR_H
#define KUAVO_MSGS_MESSAGE_IKSOLVEERROR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kuavo_msgs/handPose.h>
#include <kuavo_msgs/handPose.h>

namespace kuavo_msgs
{
template <class ContainerAllocator>
struct ikSolveError_
{
  typedef ikSolveError_<ContainerAllocator> Type;

  ikSolveError_()
    : ik_type()
    , left_pose_error()
    , right_pose_error()  {
    }
  ikSolveError_(const ContainerAllocator& _alloc)
    : ik_type(_alloc)
    , left_pose_error(_alloc)
    , right_pose_error(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ik_type_type;
  _ik_type_type ik_type;

   typedef  ::kuavo_msgs::handPose_<ContainerAllocator>  _left_pose_error_type;
  _left_pose_error_type left_pose_error;

   typedef  ::kuavo_msgs::handPose_<ContainerAllocator>  _right_pose_error_type;
  _right_pose_error_type right_pose_error;





  typedef boost::shared_ptr< ::kuavo_msgs::ikSolveError_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::ikSolveError_<ContainerAllocator> const> ConstPtr;

}; // struct ikSolveError_

typedef ::kuavo_msgs::ikSolveError_<std::allocator<void> > ikSolveError;

typedef boost::shared_ptr< ::kuavo_msgs::ikSolveError > ikSolveErrorPtr;
typedef boost::shared_ptr< ::kuavo_msgs::ikSolveError const> ikSolveErrorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::ikSolveError_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::ikSolveError_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::ikSolveError_<ContainerAllocator1> & lhs, const ::kuavo_msgs::ikSolveError_<ContainerAllocator2> & rhs)
{
  return lhs.ik_type == rhs.ik_type &&
    lhs.left_pose_error == rhs.left_pose_error &&
    lhs.right_pose_error == rhs.right_pose_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::ikSolveError_<ContainerAllocator1> & lhs, const ::kuavo_msgs::ikSolveError_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::ikSolveError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::ikSolveError_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::ikSolveError_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::ikSolveError_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::ikSolveError_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::ikSolveError_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::ikSolveError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06c12c0e6e08f286627a6f856e26223c";
  }

  static const char* value(const ::kuavo_msgs::ikSolveError_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06c12c0e6e08f286ULL;
  static const uint64_t static_value2 = 0x627a6f856e26223cULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::ikSolveError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/ikSolveError";
  }

  static const char* value(const ::kuavo_msgs::ikSolveError_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::ikSolveError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string     ik_type \n"
"handPose  left_pose_error\n"
"handPose  right_pose_error\n"
"================================================================================\n"
"MSG: kuavo_msgs/handPose\n"
"# pos\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"# rpy\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
;
  }

  static const char* value(const ::kuavo_msgs::ikSolveError_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::ikSolveError_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ik_type);
      stream.next(m.left_pose_error);
      stream.next(m.right_pose_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ikSolveError_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::ikSolveError_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::ikSolveError_<ContainerAllocator>& v)
  {
    s << indent << "ik_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ik_type);
    s << indent << "left_pose_error: ";
    s << std::endl;
    Printer< ::kuavo_msgs::handPose_<ContainerAllocator> >::stream(s, indent + "  ", v.left_pose_error);
    s << indent << "right_pose_error: ";
    s << std::endl;
    Printer< ::kuavo_msgs::handPose_<ContainerAllocator> >::stream(s, indent + "  ", v.right_pose_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_IKSOLVEERROR_H
