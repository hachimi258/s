// Generated by gencpp from file kuavo_msgs/jointMoveToRequest.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_JOINTMOVETOREQUEST_H
#define KUAVO_MSGS_MESSAGE_JOINTMOVETOREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct jointMoveToRequest_
{
  typedef jointMoveToRequest_<ContainerAllocator> Type;

  jointMoveToRequest_()
    : goal_position()
    , speed(0.0)
    , dt(0.0)  {
    }
  jointMoveToRequest_(const ContainerAllocator& _alloc)
    : goal_position(_alloc)
    , speed(0.0)
    , dt(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _goal_position_type;
  _goal_position_type goal_position;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _dt_type;
  _dt_type dt;





  typedef boost::shared_ptr< ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> const> ConstPtr;

}; // struct jointMoveToRequest_

typedef ::kuavo_msgs::jointMoveToRequest_<std::allocator<void> > jointMoveToRequest;

typedef boost::shared_ptr< ::kuavo_msgs::jointMoveToRequest > jointMoveToRequestPtr;
typedef boost::shared_ptr< ::kuavo_msgs::jointMoveToRequest const> jointMoveToRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator2> & rhs)
{
  return lhs.goal_position == rhs.goal_position &&
    lhs.speed == rhs.speed &&
    lhs.dt == rhs.dt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "45bdc9fd597f6d88b4ca552f6e6c0925";
  }

  static const char* value(const ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x45bdc9fd597f6d88ULL;
  static const uint64_t static_value2 = 0xb4ca552f6e6c0925ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/jointMoveToRequest";
  }

  static const char* value(const ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] goal_position\n"
"float64 speed\n"
"float64 dt\n"
;
  }

  static const char* value(const ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_position);
      stream.next(m.speed);
      stream.next(m.dt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jointMoveToRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::jointMoveToRequest_<ContainerAllocator>& v)
  {
    s << indent << "goal_position[]" << std::endl;
    for (size_t i = 0; i < v.goal_position.size(); ++i)
    {
      s << indent << "  goal_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal_position[i]);
    }
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "dt: ";
    Printer<double>::stream(s, indent + "  ", v.dt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_JOINTMOVETOREQUEST_H
