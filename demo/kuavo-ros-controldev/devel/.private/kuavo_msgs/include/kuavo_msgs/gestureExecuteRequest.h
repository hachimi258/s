// Generated by gencpp from file kuavo_msgs/gestureExecuteRequest.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_GESTUREEXECUTEREQUEST_H
#define KUAVO_MSGS_MESSAGE_GESTUREEXECUTEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kuavo_msgs/gestureTask.h>

namespace kuavo_msgs
{
template <class ContainerAllocator>
struct gestureExecuteRequest_
{
  typedef gestureExecuteRequest_<ContainerAllocator> Type;

  gestureExecuteRequest_()
    : gestures()  {
    }
  gestureExecuteRequest_(const ContainerAllocator& _alloc)
    : gestures(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::kuavo_msgs::gestureTask_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::kuavo_msgs::gestureTask_<ContainerAllocator> >> _gestures_type;
  _gestures_type gestures;





  typedef boost::shared_ptr< ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> const> ConstPtr;

}; // struct gestureExecuteRequest_

typedef ::kuavo_msgs::gestureExecuteRequest_<std::allocator<void> > gestureExecuteRequest;

typedef boost::shared_ptr< ::kuavo_msgs::gestureExecuteRequest > gestureExecuteRequestPtr;
typedef boost::shared_ptr< ::kuavo_msgs::gestureExecuteRequest const> gestureExecuteRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator2> & rhs)
{
  return lhs.gestures == rhs.gestures;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "686baa778a78aa01b0a6cc9824ebcd9f";
  }

  static const char* value(const ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x686baa778a78aa01ULL;
  static const uint64_t static_value2 = 0xb0a6cc9824ebcd9fULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/gestureExecuteRequest";
  }

  static const char* value(const ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This service executes a specified gesture.\n"
"# It is used to trigger a gesture by providing its name and the side of the hand(s) to use.\n"
"#\n"
"# Request:\n"
"# kuavo_msgs/gestureTask[] gestures # An array of gestures to execute, each with a name and hand side\n"
"#\n"
"# Response:\n"
"# bool success         # Indicates whether the gesture execution was successful.\n"
"# string message       # A message providing additional information (e.g., error details if the gesture failed).\n"
"\n"
"kuavo_msgs/gestureTask[] gestures\n"
"\n"
"================================================================================\n"
"MSG: kuavo_msgs/gestureTask\n"
"# This message is used to specify a gesture to execute.\n"
"# The gesture is triggered by providing its name and the side of the hand(s) to use.\n"
"\n"
"string gesture_name  # Name of the gesture to execute\n"
"int8   hand_side    # Side of the hand to use (e.g., 0 for left, 1 for right, 2 for both)\n"
;
  }

  static const char* value(const ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gestures);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gestureExecuteRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::gestureExecuteRequest_<ContainerAllocator>& v)
  {
    s << indent << "gestures[]" << std::endl;
    for (size_t i = 0; i < v.gestures.size(); ++i)
    {
      s << indent << "  gestures[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kuavo_msgs::gestureTask_<ContainerAllocator> >::stream(s, indent + "    ", v.gestures[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_GESTUREEXECUTEREQUEST_H
