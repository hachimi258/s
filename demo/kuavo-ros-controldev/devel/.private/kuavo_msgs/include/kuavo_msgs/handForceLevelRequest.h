// Generated by gencpp from file kuavo_msgs/handForceLevelRequest.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_HANDFORCELEVELREQUEST_H
#define KUAVO_MSGS_MESSAGE_HANDFORCELEVELREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct handForceLevelRequest_
{
  typedef handForceLevelRequest_<ContainerAllocator> Type;

  handForceLevelRequest_()
    : force_level(0)
    , hand_side(0)  {
    }
  handForceLevelRequest_(const ContainerAllocator& _alloc)
    : force_level(0)
    , hand_side(0)  {
  (void)_alloc;
    }



   typedef int8_t _force_level_type;
  _force_level_type force_level;

   typedef int8_t _hand_side_type;
  _hand_side_type hand_side;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SMALL)
  #undef SMALL
#endif
#if defined(_WIN32) && defined(NORMAL)
  #undef NORMAL
#endif
#if defined(_WIN32) && defined(FULL)
  #undef FULL
#endif
#if defined(_WIN32) && defined(LEFT_HAND)
  #undef LEFT_HAND
#endif
#if defined(_WIN32) && defined(RIGHT_HAND)
  #undef RIGHT_HAND
#endif
#if defined(_WIN32) && defined(BOTH_HANDS)
  #undef BOTH_HANDS
#endif

  enum {
    SMALL = 0,
    NORMAL = 1,
    FULL = 2,
    LEFT_HAND = 0,
    RIGHT_HAND = 1,
    BOTH_HANDS = 2,
  };


  typedef boost::shared_ptr< ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> const> ConstPtr;

}; // struct handForceLevelRequest_

typedef ::kuavo_msgs::handForceLevelRequest_<std::allocator<void> > handForceLevelRequest;

typedef boost::shared_ptr< ::kuavo_msgs::handForceLevelRequest > handForceLevelRequestPtr;
typedef boost::shared_ptr< ::kuavo_msgs::handForceLevelRequest const> handForceLevelRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator2> & rhs)
{
  return lhs.force_level == rhs.force_level &&
    lhs.hand_side == rhs.hand_side;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5311779bc3f9aed0d69c0597dc982fd7";
  }

  static const char* value(const ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5311779bc3f9aed0ULL;
  static const uint64_t static_value2 = 0xd69c0597dc982fd7ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/handForceLevelRequest";
  }

  static const char* value(const ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This service sets the force level for the Dexhand.\n"
"# It is used to control the force applied by the Dexhand.\n"
"#\n"
"# Request:\n"
"# int8 SMALL = 0          # Small force level.\n"
"# int8 NORMAL = 1         # Normal force level.\n"
"# int8 FULL = 2           # Full force level.\n"
"# int8 force_level        # The desired force level to set.\n"
"#\n"
"# Response:\n"
"# bool success            # Indicates whether the request was successful.\n"
"# string message          # A message indicating the result of the request.\n"
"\n"
"int8 SMALL = 0\n"
"int8 NORMAL = 1\n"
"int8 FULL = 2\n"
"\n"
"int8 LEFT_HAND=0\n"
"int8 RIGHT_HAND=1\n"
"int8 BOTH_HANDS=2\n"
"\n"
"int8 force_level\n"
"int8 hand_side\n"
;
  }

  static const char* value(const ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.force_level);
      stream.next(m.hand_side);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct handForceLevelRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::handForceLevelRequest_<ContainerAllocator>& v)
  {
    s << indent << "force_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.force_level);
    s << indent << "hand_side: ";
    Printer<int8_t>::stream(s, indent + "  ", v.hand_side);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_HANDFORCELEVELREQUEST_H
