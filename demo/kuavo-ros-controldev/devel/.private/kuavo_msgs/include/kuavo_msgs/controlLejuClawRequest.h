// Generated by gencpp from file kuavo_msgs/controlLejuClawRequest.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_CONTROLLEJUCLAWREQUEST_H
#define KUAVO_MSGS_MESSAGE_CONTROLLEJUCLAWREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kuavo_msgs/endEffectorData.h>

namespace kuavo_msgs
{
template <class ContainerAllocator>
struct controlLejuClawRequest_
{
  typedef controlLejuClawRequest_<ContainerAllocator> Type;

  controlLejuClawRequest_()
    : data()  {
    }
  controlLejuClawRequest_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::kuavo_msgs::endEffectorData_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> const> ConstPtr;

}; // struct controlLejuClawRequest_

typedef ::kuavo_msgs::controlLejuClawRequest_<std::allocator<void> > controlLejuClawRequest;

typedef boost::shared_ptr< ::kuavo_msgs::controlLejuClawRequest > controlLejuClawRequestPtr;
typedef boost::shared_ptr< ::kuavo_msgs::controlLejuClawRequest const> controlLejuClawRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4255ea8183b49bda4b8fed5d1dd8d5b9";
  }

  static const char* value(const ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4255ea8183b49bdaULL;
  static const uint64_t static_value2 = 0x4b8fed5d1dd8d5b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/controlLejuClawRequest";
  }

  static const char* value(const ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# kuavo_msgs/endEffectorData:\n"
"# string[] name  \n"
"# float64[] position\n"
"# float64[] velocity  \n"
"# float64[] effort\n"
"# \n"
"# ** For the Service Notes **\n"
"# \n"
"# name     : 'left_claw' , 'right_claw'\n"
"# position : 0 ~ 100, the percentage of the claw's opening angle\n"
"#            0: closed, 100: open   \n"
"# velocity : 0 ~ 100, if size is 0, will use default `50.0`.\n"
"# effort   : torque/current, better 1A ~ 2A, if size is 0, will use default `1.0`.\n"
"# \n"
"# ** Example **\n"
"# Request:\n"
"# data:\n"
"#   - name: ['left_claw', 'right_claw']\n"
"#     position: [20.0, 20.0]\n"
"#     velocity: [50.0, 50.0]\n"
"#     effort: [1.0, 1.0]\n"
"#\n"
"# Response:\n"
"# success: True/False, call service success or not.\n"
"# message: 'success'\n"
"kuavo_msgs/endEffectorData data\n"
"\n"
"================================================================================\n"
"MSG: kuavo_msgs/endEffectorData\n"
"string[] name  \n"
"float64[] position\n"
"float64[] velocity  \n"
"float64[] effort\n"
;
  }

  static const char* value(const ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controlLejuClawRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::controlLejuClawRequest_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    s << std::endl;
    Printer< ::kuavo_msgs::endEffectorData_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_CONTROLLEJUCLAWREQUEST_H
