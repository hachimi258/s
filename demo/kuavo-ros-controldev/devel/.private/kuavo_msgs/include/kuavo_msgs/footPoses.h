// Generated by gencpp from file kuavo_msgs/footPoses.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_FOOTPOSES_H
#define KUAVO_MSGS_MESSAGE_FOOTPOSES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kuavo_msgs/footPose.h>

namespace kuavo_msgs
{
template <class ContainerAllocator>
struct footPoses_
{
  typedef footPoses_<ContainerAllocator> Type;

  footPoses_()
    : data()  {
    }
  footPoses_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::kuavo_msgs::footPose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::kuavo_msgs::footPose_<ContainerAllocator> >> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::kuavo_msgs::footPoses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::footPoses_<ContainerAllocator> const> ConstPtr;

}; // struct footPoses_

typedef ::kuavo_msgs::footPoses_<std::allocator<void> > footPoses;

typedef boost::shared_ptr< ::kuavo_msgs::footPoses > footPosesPtr;
typedef boost::shared_ptr< ::kuavo_msgs::footPoses const> footPosesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::footPoses_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::footPoses_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::footPoses_<ContainerAllocator1> & lhs, const ::kuavo_msgs::footPoses_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::footPoses_<ContainerAllocator1> & lhs, const ::kuavo_msgs::footPoses_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::footPoses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::footPoses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::footPoses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::footPoses_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::footPoses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::footPoses_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::footPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2fad89e6e8a2f3c5d0ec891cc7c76c35";
  }

  static const char* value(const ::kuavo_msgs::footPoses_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2fad89e6e8a2f3c5ULL;
  static const uint64_t static_value2 = 0xd0ec891cc7c76c35ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::footPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/footPoses";
  }

  static const char* value(const ::kuavo_msgs::footPoses_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::footPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "footPose[] data\n"
"\n"
"================================================================================\n"
"MSG: kuavo_msgs/footPose\n"
"float64[4] footPose # x, y, z, yaw\n"
"float64[4] torsoPose # x, y, z, yaw\n"
;
  }

  static const char* value(const ::kuavo_msgs::footPoses_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::footPoses_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct footPoses_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::footPoses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::footPoses_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kuavo_msgs::footPose_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_FOOTPOSES_H
