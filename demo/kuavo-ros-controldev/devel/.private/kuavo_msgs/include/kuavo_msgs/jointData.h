// Generated by gencpp from file kuavo_msgs/jointData.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_JOINTDATA_H
#define KUAVO_MSGS_MESSAGE_JOINTDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct jointData_
{
  typedef jointData_<ContainerAllocator> Type;

  jointData_()
    : joint_q()
    , joint_v()
    , joint_vd()
    , joint_torque()  {
    }
  jointData_(const ContainerAllocator& _alloc)
    : joint_q(_alloc)
    , joint_v(_alloc)
    , joint_vd(_alloc)
    , joint_torque(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_q_type;
  _joint_q_type joint_q;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_v_type;
  _joint_v_type joint_v;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_vd_type;
  _joint_vd_type joint_vd;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_torque_type;
  _joint_torque_type joint_torque;





  typedef boost::shared_ptr< ::kuavo_msgs::jointData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::jointData_<ContainerAllocator> const> ConstPtr;

}; // struct jointData_

typedef ::kuavo_msgs::jointData_<std::allocator<void> > jointData;

typedef boost::shared_ptr< ::kuavo_msgs::jointData > jointDataPtr;
typedef boost::shared_ptr< ::kuavo_msgs::jointData const> jointDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::jointData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::jointData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::jointData_<ContainerAllocator1> & lhs, const ::kuavo_msgs::jointData_<ContainerAllocator2> & rhs)
{
  return lhs.joint_q == rhs.joint_q &&
    lhs.joint_v == rhs.joint_v &&
    lhs.joint_vd == rhs.joint_vd &&
    lhs.joint_torque == rhs.joint_torque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::jointData_<ContainerAllocator1> & lhs, const ::kuavo_msgs::jointData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::jointData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::jointData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::jointData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::jointData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::jointData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::jointData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::jointData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e01436cbc40e94e8fe8f54a2c4ea282";
  }

  static const char* value(const ::kuavo_msgs::jointData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e01436cbc40e94eULL;
  static const uint64_t static_value2 = 0x8fe8f54a2c4ea282ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::jointData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/jointData";
  }

  static const char* value(const ::kuavo_msgs::jointData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::jointData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] joint_q  \n"
"float64[] joint_v  \n"
"float64[] joint_vd    \n"
"float64[] joint_torque  \n"
;
  }

  static const char* value(const ::kuavo_msgs::jointData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::jointData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_q);
      stream.next(m.joint_v);
      stream.next(m.joint_vd);
      stream.next(m.joint_torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jointData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::jointData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::jointData_<ContainerAllocator>& v)
  {
    s << indent << "joint_q[]" << std::endl;
    for (size_t i = 0; i < v.joint_q.size(); ++i)
    {
      s << indent << "  joint_q[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_q[i]);
    }
    s << indent << "joint_v[]" << std::endl;
    for (size_t i = 0; i < v.joint_v.size(); ++i)
    {
      s << indent << "  joint_v[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_v[i]);
    }
    s << indent << "joint_vd[]" << std::endl;
    for (size_t i = 0; i < v.joint_vd.size(); ++i)
    {
      s << indent << "  joint_vd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_vd[i]);
    }
    s << indent << "joint_torque[]" << std::endl;
    for (size_t i = 0; i < v.joint_torque.size(); ++i)
    {
      s << indent << "  joint_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_torque[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_JOINTDATA_H
