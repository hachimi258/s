// Generated by gencpp from file kuavo_msgs/gestureListRequest.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_GESTURELISTREQUEST_H
#define KUAVO_MSGS_MESSAGE_GESTURELISTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct gestureListRequest_
{
  typedef gestureListRequest_<ContainerAllocator> Type;

  gestureListRequest_()
    {
    }
  gestureListRequest_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }







  typedef boost::shared_ptr< ::kuavo_msgs::gestureListRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::gestureListRequest_<ContainerAllocator> const> ConstPtr;

}; // struct gestureListRequest_

typedef ::kuavo_msgs::gestureListRequest_<std::allocator<void> > gestureListRequest;

typedef boost::shared_ptr< ::kuavo_msgs::gestureListRequest > gestureListRequestPtr;
typedef boost::shared_ptr< ::kuavo_msgs::gestureListRequest const> gestureListRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::gestureListRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::gestureListRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::gestureListRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::gestureListRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::gestureListRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::gestureListRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::gestureListRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::gestureListRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::gestureListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const ::kuavo_msgs::gestureListRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::gestureListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/gestureListRequest";
  }

  static const char* value(const ::kuavo_msgs::gestureListRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::gestureListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This service returns a list of available gestures.\n"
"# It is used to query the system for all gestures that can be recognized or performed.\n"
"#\n"
"# Request:\n"
"# No input parameters are required.\n"
"#\n"
"# Response:\n"
"# bool success                # Indicates whether the request was successful.\n"
"# int32 gesture_count         # The number of gestures returned in the list.\n"
"# string message              # A message indicating the result of the request.\n"
"# kuavo_msgs/gestureInfo[] gesture_infos # A list of gesture information, each containing the name, alias, and description of a gesture.\n"
"\n"
"# Define the GestureInfo message\n"
"# string gesture_name        # The name of the gesture.\n"
"# string[] alias             # A list of aliases for the gesture.\n"
"# string description         # A description of the gesture.\n"
"\n"
;
  }

  static const char* value(const ::kuavo_msgs::gestureListRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::gestureListRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gestureListRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::gestureListRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kuavo_msgs::gestureListRequest_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_GESTURELISTREQUEST_H
