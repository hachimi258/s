// Generated by gencpp from file kuavo_msgs/headBodyPose.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_HEADBODYPOSE_H
#define KUAVO_MSGS_MESSAGE_HEADBODYPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct headBodyPose_
{
  typedef headBodyPose_<ContainerAllocator> Type;

  headBodyPose_()
    : head_pitch(0.0)
    , head_yaw(0.0)
    , body_roll(0.0)
    , body_pitch(0.0)
    , body_yaw(0.0)
    , body_x(0.0)
    , body_y(0.0)
    , body_height(0.0)  {
    }
  headBodyPose_(const ContainerAllocator& _alloc)
    : head_pitch(0.0)
    , head_yaw(0.0)
    , body_roll(0.0)
    , body_pitch(0.0)
    , body_yaw(0.0)
    , body_x(0.0)
    , body_y(0.0)
    , body_height(0.0)  {
  (void)_alloc;
    }



   typedef double _head_pitch_type;
  _head_pitch_type head_pitch;

   typedef double _head_yaw_type;
  _head_yaw_type head_yaw;

   typedef double _body_roll_type;
  _body_roll_type body_roll;

   typedef double _body_pitch_type;
  _body_pitch_type body_pitch;

   typedef double _body_yaw_type;
  _body_yaw_type body_yaw;

   typedef double _body_x_type;
  _body_x_type body_x;

   typedef double _body_y_type;
  _body_y_type body_y;

   typedef double _body_height_type;
  _body_height_type body_height;





  typedef boost::shared_ptr< ::kuavo_msgs::headBodyPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::headBodyPose_<ContainerAllocator> const> ConstPtr;

}; // struct headBodyPose_

typedef ::kuavo_msgs::headBodyPose_<std::allocator<void> > headBodyPose;

typedef boost::shared_ptr< ::kuavo_msgs::headBodyPose > headBodyPosePtr;
typedef boost::shared_ptr< ::kuavo_msgs::headBodyPose const> headBodyPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::headBodyPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::headBodyPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::headBodyPose_<ContainerAllocator1> & lhs, const ::kuavo_msgs::headBodyPose_<ContainerAllocator2> & rhs)
{
  return lhs.head_pitch == rhs.head_pitch &&
    lhs.head_yaw == rhs.head_yaw &&
    lhs.body_roll == rhs.body_roll &&
    lhs.body_pitch == rhs.body_pitch &&
    lhs.body_yaw == rhs.body_yaw &&
    lhs.body_x == rhs.body_x &&
    lhs.body_y == rhs.body_y &&
    lhs.body_height == rhs.body_height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::headBodyPose_<ContainerAllocator1> & lhs, const ::kuavo_msgs::headBodyPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::headBodyPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::headBodyPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::headBodyPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::headBodyPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::headBodyPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::headBodyPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::headBodyPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86a58d9f885335d8a0b389ace07ba692";
  }

  static const char* value(const ::kuavo_msgs::headBodyPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86a58d9f885335d8ULL;
  static const uint64_t static_value2 = 0xa0b389ace07ba692ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::headBodyPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/headBodyPose";
  }

  static const char* value(const ::kuavo_msgs::headBodyPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::headBodyPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# head (rad)\n"
"float64 head_pitch\n"
"float64 head_yaw\n"
"# body (rad)\n"
"float64 body_roll\n"
"float64 body_pitch\n"
"float64 body_yaw\n"
"\n"
"float64 body_x\n"
"float64 body_y\n"
"float64 body_height\n"
;
  }

  static const char* value(const ::kuavo_msgs::headBodyPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::headBodyPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.head_pitch);
      stream.next(m.head_yaw);
      stream.next(m.body_roll);
      stream.next(m.body_pitch);
      stream.next(m.body_yaw);
      stream.next(m.body_x);
      stream.next(m.body_y);
      stream.next(m.body_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct headBodyPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::headBodyPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::headBodyPose_<ContainerAllocator>& v)
  {
    s << indent << "head_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.head_pitch);
    s << indent << "head_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.head_yaw);
    s << indent << "body_roll: ";
    Printer<double>::stream(s, indent + "  ", v.body_roll);
    s << indent << "body_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.body_pitch);
    s << indent << "body_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.body_yaw);
    s << indent << "body_x: ";
    Printer<double>::stream(s, indent + "  ", v.body_x);
    s << indent << "body_y: ";
    Printer<double>::stream(s, indent + "  ", v.body_y);
    s << indent << "body_height: ";
    Printer<double>::stream(s, indent + "  ", v.body_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_HEADBODYPOSE_H
