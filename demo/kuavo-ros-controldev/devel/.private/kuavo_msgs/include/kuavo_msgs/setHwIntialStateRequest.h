// Generated by gencpp from file kuavo_msgs/setHwIntialStateRequest.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_SETHWINTIALSTATEREQUEST_H
#define KUAVO_MSGS_MESSAGE_SETHWINTIALSTATEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct setHwIntialStateRequest_
{
  typedef setHwIntialStateRequest_<ContainerAllocator> Type;

  setHwIntialStateRequest_()
    : q_intial()
    , v_intial()  {
    }
  setHwIntialStateRequest_(const ContainerAllocator& _alloc)
    : q_intial(_alloc)
    , v_intial(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _q_intial_type;
  _q_intial_type q_intial;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _v_intial_type;
  _v_intial_type v_intial;





  typedef boost::shared_ptr< ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct setHwIntialStateRequest_

typedef ::kuavo_msgs::setHwIntialStateRequest_<std::allocator<void> > setHwIntialStateRequest;

typedef boost::shared_ptr< ::kuavo_msgs::setHwIntialStateRequest > setHwIntialStateRequestPtr;
typedef boost::shared_ptr< ::kuavo_msgs::setHwIntialStateRequest const> setHwIntialStateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.q_intial == rhs.q_intial &&
    lhs.v_intial == rhs.v_intial;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e059ca7891626ef7f222daadf24b17ad";
  }

  static const char* value(const ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe059ca7891626ef7ULL;
  static const uint64_t static_value2 = 0xf222daadf24b17adULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/setHwIntialStateRequest";
  }

  static const char* value(const ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] q_intial  \n"
"float64[] v_intial  \n"
;
  }

  static const char* value(const ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q_intial);
      stream.next(m.v_intial);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct setHwIntialStateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::setHwIntialStateRequest_<ContainerAllocator>& v)
  {
    s << indent << "q_intial[]" << std::endl;
    for (size_t i = 0; i < v.q_intial.size(); ++i)
    {
      s << indent << "  q_intial[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_intial[i]);
    }
    s << indent << "v_intial[]" << std::endl;
    for (size_t i = 0; i < v.v_intial.size(); ++i)
    {
      s << indent << "  v_intial[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.v_intial[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_SETHWINTIALSTATEREQUEST_H
