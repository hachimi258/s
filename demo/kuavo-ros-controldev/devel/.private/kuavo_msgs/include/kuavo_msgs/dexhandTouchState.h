// Generated by gencpp from file kuavo_msgs/dexhandTouchState.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_DEXHANDTOUCHSTATE_H
#define KUAVO_MSGS_MESSAGE_DEXHANDTOUCHSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <kuavo_msgs/touchSensorStatus.h>
#include <kuavo_msgs/touchSensorStatus.h>

namespace kuavo_msgs
{
template <class ContainerAllocator>
struct dexhandTouchState_
{
  typedef dexhandTouchState_<ContainerAllocator> Type;

  dexhandTouchState_()
    : header()
    , left_hand()
    , right_hand()  {
    }
  dexhandTouchState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , left_hand()
    , right_hand()  {
  (void)_alloc;
      left_hand.assign( ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> (_alloc));

      right_hand.assign( ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> , 5>  _left_hand_type;
  _left_hand_type left_hand;

   typedef boost::array< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> , 5>  _right_hand_type;
  _right_hand_type right_hand;





  typedef boost::shared_ptr< ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> const> ConstPtr;

}; // struct dexhandTouchState_

typedef ::kuavo_msgs::dexhandTouchState_<std::allocator<void> > dexhandTouchState;

typedef boost::shared_ptr< ::kuavo_msgs::dexhandTouchState > dexhandTouchStatePtr;
typedef boost::shared_ptr< ::kuavo_msgs::dexhandTouchState const> dexhandTouchStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::dexhandTouchState_<ContainerAllocator1> & lhs, const ::kuavo_msgs::dexhandTouchState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.left_hand == rhs.left_hand &&
    lhs.right_hand == rhs.right_hand;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::dexhandTouchState_<ContainerAllocator1> & lhs, const ::kuavo_msgs::dexhandTouchState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce777577e1167705dca90d1f63037a05";
  }

  static const char* value(const ::kuavo_msgs::dexhandTouchState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce777577e1167705ULL;
  static const uint64_t static_value2 = 0xdca90d1f63037a05ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/dexhandTouchState";
  }

  static const char* value(const ::kuavo_msgs::dexhandTouchState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"kuavo_msgs/touchSensorStatus[5] left_hand\n"
"kuavo_msgs/touchSensorStatus[5] right_hand\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: kuavo_msgs/touchSensorStatus\n"
"uint16 normal_force1  # 法向力1\n"
"uint16 normal_force2  # 法向力2\n"
"uint16 normal_force3  # 法向力3\n"
"uint16 tangential_force1  # 切向力1\n"
"uint16 tangential_force2  # 切向力2\n"
"uint16 tangential_force3  # 切向力3\n"
"uint16 tangential_direction1  # 切向力方向1\n"
"uint16 tangential_direction2  # 切向力方向2\n"
"uint16 tangential_direction3  # 切向力方向3\n"
"uint32 self_proximity1  # 自电容接近传感器1\n"
"uint32 self_proximity2  # 自电容接近传感器2\n"
"uint32 mutual_proximity  # 互电容接近传感器\n"
"uint16 status  # 传感器状态\n"
;
  }

  static const char* value(const ::kuavo_msgs::dexhandTouchState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.left_hand);
      stream.next(m.right_hand);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dexhandTouchState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::dexhandTouchState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::dexhandTouchState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "left_hand[]" << std::endl;
    for (size_t i = 0; i < v.left_hand.size(); ++i)
    {
      s << indent << "  left_hand[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.left_hand[i]);
    }
    s << indent << "right_hand[]" << std::endl;
    for (size_t i = 0; i < v.right_hand.size(); ++i)
    {
      s << indent << "  right_hand[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.right_hand[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_DEXHANDTOUCHSTATE_H
