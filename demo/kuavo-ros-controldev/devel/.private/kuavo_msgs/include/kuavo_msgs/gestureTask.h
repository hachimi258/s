// Generated by gencpp from file kuavo_msgs/gestureTask.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_GESTURETASK_H
#define KUAVO_MSGS_MESSAGE_GESTURETASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct gestureTask_
{
  typedef gestureTask_<ContainerAllocator> Type;

  gestureTask_()
    : gesture_name()
    , hand_side(0)  {
    }
  gestureTask_(const ContainerAllocator& _alloc)
    : gesture_name(_alloc)
    , hand_side(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gesture_name_type;
  _gesture_name_type gesture_name;

   typedef int8_t _hand_side_type;
  _hand_side_type hand_side;





  typedef boost::shared_ptr< ::kuavo_msgs::gestureTask_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::gestureTask_<ContainerAllocator> const> ConstPtr;

}; // struct gestureTask_

typedef ::kuavo_msgs::gestureTask_<std::allocator<void> > gestureTask;

typedef boost::shared_ptr< ::kuavo_msgs::gestureTask > gestureTaskPtr;
typedef boost::shared_ptr< ::kuavo_msgs::gestureTask const> gestureTaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::gestureTask_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::gestureTask_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::gestureTask_<ContainerAllocator1> & lhs, const ::kuavo_msgs::gestureTask_<ContainerAllocator2> & rhs)
{
  return lhs.gesture_name == rhs.gesture_name &&
    lhs.hand_side == rhs.hand_side;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::gestureTask_<ContainerAllocator1> & lhs, const ::kuavo_msgs::gestureTask_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::gestureTask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::gestureTask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::gestureTask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::gestureTask_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::gestureTask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::gestureTask_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::gestureTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be7fe1eba1df13c392c3a5d13b9f3dae";
  }

  static const char* value(const ::kuavo_msgs::gestureTask_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe7fe1eba1df13c3ULL;
  static const uint64_t static_value2 = 0x92c3a5d13b9f3daeULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::gestureTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/gestureTask";
  }

  static const char* value(const ::kuavo_msgs::gestureTask_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::gestureTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message is used to specify a gesture to execute.\n"
"# The gesture is triggered by providing its name and the side of the hand(s) to use.\n"
"\n"
"string gesture_name  # Name of the gesture to execute\n"
"int8   hand_side    # Side of the hand to use (e.g., 0 for left, 1 for right, 2 for both)\n"
;
  }

  static const char* value(const ::kuavo_msgs::gestureTask_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::gestureTask_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gesture_name);
      stream.next(m.hand_side);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gestureTask_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::gestureTask_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::gestureTask_<ContainerAllocator>& v)
  {
    s << indent << "gesture_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gesture_name);
    s << indent << "hand_side: ";
    Printer<int8_t>::stream(s, indent + "  ", v.hand_side);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_GESTURETASK_H
