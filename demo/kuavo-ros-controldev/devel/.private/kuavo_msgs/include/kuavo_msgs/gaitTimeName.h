// Generated by gencpp from file kuavo_msgs/gaitTimeName.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_GAITTIMENAME_H
#define KUAVO_MSGS_MESSAGE_GAITTIMENAME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct gaitTimeName_
{
  typedef gaitTimeName_<ContainerAllocator> Type;

  gaitTimeName_()
    : start_time(0.0)
    , gait_name()  {
    }
  gaitTimeName_(const ContainerAllocator& _alloc)
    : start_time(0.0)
    , gait_name(_alloc)  {
  (void)_alloc;
    }



   typedef float _start_time_type;
  _start_time_type start_time;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gait_name_type;
  _gait_name_type gait_name;





  typedef boost::shared_ptr< ::kuavo_msgs::gaitTimeName_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::gaitTimeName_<ContainerAllocator> const> ConstPtr;

}; // struct gaitTimeName_

typedef ::kuavo_msgs::gaitTimeName_<std::allocator<void> > gaitTimeName;

typedef boost::shared_ptr< ::kuavo_msgs::gaitTimeName > gaitTimeNamePtr;
typedef boost::shared_ptr< ::kuavo_msgs::gaitTimeName const> gaitTimeNameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::gaitTimeName_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::gaitTimeName_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::gaitTimeName_<ContainerAllocator1> & lhs, const ::kuavo_msgs::gaitTimeName_<ContainerAllocator2> & rhs)
{
  return lhs.start_time == rhs.start_time &&
    lhs.gait_name == rhs.gait_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::gaitTimeName_<ContainerAllocator1> & lhs, const ::kuavo_msgs::gaitTimeName_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::gaitTimeName_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::gaitTimeName_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::gaitTimeName_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::gaitTimeName_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::gaitTimeName_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::gaitTimeName_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::gaitTimeName_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c694c8dbb2e8c9d73614407bfe314692";
  }

  static const char* value(const ::kuavo_msgs::gaitTimeName_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc694c8dbb2e8c9d7ULL;
  static const uint64_t static_value2 = 0x3614407bfe314692ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::gaitTimeName_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/gaitTimeName";
  }

  static const char* value(const ::kuavo_msgs::gaitTimeName_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::gaitTimeName_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 start_time\n"
"string  gait_name\n"
;
  }

  static const char* value(const ::kuavo_msgs::gaitTimeName_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::gaitTimeName_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_time);
      stream.next(m.gait_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gaitTimeName_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::gaitTimeName_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::gaitTimeName_<ContainerAllocator>& v)
  {
    s << indent << "start_time: ";
    Printer<float>::stream(s, indent + "  ", v.start_time);
    s << indent << "gait_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gait_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_GAITTIMENAME_H
