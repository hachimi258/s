// Generated by gencpp from file kuavo_msgs/singleStepControlRequest.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_SINGLESTEPCONTROLREQUEST_H
#define KUAVO_MSGS_MESSAGE_SINGLESTEPCONTROLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kuavo_msgs/footPoseTargetTrajectories.h>

namespace kuavo_msgs
{
template <class ContainerAllocator>
struct singleStepControlRequest_
{
  typedef singleStepControlRequest_<ContainerAllocator> Type;

  singleStepControlRequest_()
    : foot_pose_target_trajectories()  {
    }
  singleStepControlRequest_(const ContainerAllocator& _alloc)
    : foot_pose_target_trajectories(_alloc)  {
  (void)_alloc;
    }



   typedef  ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator>  _foot_pose_target_trajectories_type;
  _foot_pose_target_trajectories_type foot_pose_target_trajectories;





  typedef boost::shared_ptr< ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct singleStepControlRequest_

typedef ::kuavo_msgs::singleStepControlRequest_<std::allocator<void> > singleStepControlRequest;

typedef boost::shared_ptr< ::kuavo_msgs::singleStepControlRequest > singleStepControlRequestPtr;
typedef boost::shared_ptr< ::kuavo_msgs::singleStepControlRequest const> singleStepControlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.foot_pose_target_trajectories == rhs.foot_pose_target_trajectories;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17f130f2bf33453ad92f340f67992d0e";
  }

  static const char* value(const ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17f130f2bf33453aULL;
  static const uint64_t static_value2 = 0xd92f340f67992d0eULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/singleStepControlRequest";
  }

  static const char* value(const ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "footPoseTargetTrajectories foot_pose_target_trajectories\n"
"\n"
"================================================================================\n"
"MSG: kuavo_msgs/footPoseTargetTrajectories\n"
"float64[]    timeTrajectory\n"
"int32[]      footIndexTrajectory\n"
"footPose[]   footPoseTrajectory\n"
"================================================================================\n"
"MSG: kuavo_msgs/footPose\n"
"float64[4] footPose # x, y, z, yaw\n"
"float64[4] torsoPose # x, y, z, yaw\n"
;
  }

  static const char* value(const ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.foot_pose_target_trajectories);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct singleStepControlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::singleStepControlRequest_<ContainerAllocator>& v)
  {
    s << indent << "foot_pose_target_trajectories: ";
    s << std::endl;
    Printer< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> >::stream(s, indent + "  ", v.foot_pose_target_trajectories);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_SINGLESTEPCONTROLREQUEST_H
