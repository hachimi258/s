// Generated by gencpp from file kuavo_msgs/imuData.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_IMUDATA_H
#define KUAVO_MSGS_MESSAGE_IMUDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Quaternion.h>

namespace kuavo_msgs
{
template <class ContainerAllocator>
struct imuData_
{
  typedef imuData_<ContainerAllocator> Type;

  imuData_()
    : gyro()
    , acc()
    , free_acc()
    , quat()  {
    }
  imuData_(const ContainerAllocator& _alloc)
    : gyro(_alloc)
    , acc(_alloc)
    , free_acc(_alloc)
    , quat(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _gyro_type;
  _gyro_type gyro;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acc_type;
  _acc_type acc;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _free_acc_type;
  _free_acc_type free_acc;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _quat_type;
  _quat_type quat;





  typedef boost::shared_ptr< ::kuavo_msgs::imuData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::imuData_<ContainerAllocator> const> ConstPtr;

}; // struct imuData_

typedef ::kuavo_msgs::imuData_<std::allocator<void> > imuData;

typedef boost::shared_ptr< ::kuavo_msgs::imuData > imuDataPtr;
typedef boost::shared_ptr< ::kuavo_msgs::imuData const> imuDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::imuData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::imuData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::imuData_<ContainerAllocator1> & lhs, const ::kuavo_msgs::imuData_<ContainerAllocator2> & rhs)
{
  return lhs.gyro == rhs.gyro &&
    lhs.acc == rhs.acc &&
    lhs.free_acc == rhs.free_acc &&
    lhs.quat == rhs.quat;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::imuData_<ContainerAllocator1> & lhs, const ::kuavo_msgs::imuData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::imuData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::imuData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::imuData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::imuData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::imuData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::imuData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::imuData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6406067cf839b39a677ae809cd04646a";
  }

  static const char* value(const ::kuavo_msgs::imuData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6406067cf839b39aULL;
  static const uint64_t static_value2 = 0x677ae809cd04646aULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::imuData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/imuData";
  }

  static const char* value(const ::kuavo_msgs::imuData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::imuData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 gyro    #陀螺仪数据\n"
"geometry_msgs/Vector3 acc     #加速计数据\n"
"geometry_msgs/Vector3 free_acc    #无重力加速度数据\n"
"geometry_msgs/Quaternion quat    #四元数数据\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::kuavo_msgs::imuData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::imuData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gyro);
      stream.next(m.acc);
      stream.next(m.free_acc);
      stream.next(m.quat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imuData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::imuData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::imuData_<ContainerAllocator>& v)
  {
    s << indent << "gyro: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.gyro);
    s << indent << "acc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acc);
    s << indent << "free_acc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.free_acc);
    s << indent << "quat: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.quat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_IMUDATA_H
