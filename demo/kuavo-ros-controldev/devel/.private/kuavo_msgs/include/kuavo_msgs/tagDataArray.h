// Generated by gencpp from file kuavo_msgs/tagDataArray.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_TAGDATAARRAY_H
#define KUAVO_MSGS_MESSAGE_TAGDATAARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace kuavo_msgs
{
template <class ContainerAllocator>
struct tagDataArray_
{
  typedef tagDataArray_<ContainerAllocator> Type;

  tagDataArray_()
    : tag_ids()
    , tag_poses()  {
    }
  tagDataArray_(const ContainerAllocator& _alloc)
    : tag_ids(_alloc)
    , tag_poses(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _tag_ids_type;
  _tag_ids_type tag_ids;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Pose_<ContainerAllocator> >> _tag_poses_type;
  _tag_poses_type tag_poses;





  typedef boost::shared_ptr< ::kuavo_msgs::tagDataArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::tagDataArray_<ContainerAllocator> const> ConstPtr;

}; // struct tagDataArray_

typedef ::kuavo_msgs::tagDataArray_<std::allocator<void> > tagDataArray;

typedef boost::shared_ptr< ::kuavo_msgs::tagDataArray > tagDataArrayPtr;
typedef boost::shared_ptr< ::kuavo_msgs::tagDataArray const> tagDataArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::tagDataArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::tagDataArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::tagDataArray_<ContainerAllocator1> & lhs, const ::kuavo_msgs::tagDataArray_<ContainerAllocator2> & rhs)
{
  return lhs.tag_ids == rhs.tag_ids &&
    lhs.tag_poses == rhs.tag_poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::tagDataArray_<ContainerAllocator1> & lhs, const ::kuavo_msgs::tagDataArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::tagDataArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::tagDataArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::tagDataArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::tagDataArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::tagDataArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::tagDataArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::tagDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "454da6edf551b421dda595d3272ef7ac";
  }

  static const char* value(const ::kuavo_msgs::tagDataArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x454da6edf551b421ULL;
  static const uint64_t static_value2 = 0xdda595d3272ef7acULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::tagDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/tagDataArray";
  }

  static const char* value(const ::kuavo_msgs::tagDataArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::tagDataArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] tag_ids\n"
"geometry_msgs/Pose[] tag_poses\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::kuavo_msgs::tagDataArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::tagDataArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tag_ids);
      stream.next(m.tag_poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tagDataArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::tagDataArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::tagDataArray_<ContainerAllocator>& v)
  {
    s << indent << "tag_ids[]" << std::endl;
    for (size_t i = 0; i < v.tag_ids.size(); ++i)
    {
      s << indent << "  tag_ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tag_ids[i]);
    }
    s << indent << "tag_poses[]" << std::endl;
    for (size_t i = 0; i < v.tag_poses.size(); ++i)
    {
      s << indent << "  tag_poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.tag_poses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_TAGDATAARRAY_H
