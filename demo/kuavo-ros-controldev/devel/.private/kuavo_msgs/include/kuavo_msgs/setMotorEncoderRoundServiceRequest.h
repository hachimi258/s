// Generated by gencpp from file kuavo_msgs/setMotorEncoderRoundServiceRequest.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_SETMOTORENCODERROUNDSERVICEREQUEST_H
#define KUAVO_MSGS_MESSAGE_SETMOTORENCODERROUNDSERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct setMotorEncoderRoundServiceRequest_
{
  typedef setMotorEncoderRoundServiceRequest_<ContainerAllocator> Type;

  setMotorEncoderRoundServiceRequest_()
    : motor_id(0)
    , direction(0)
    , save_offset(false)  {
    }
  setMotorEncoderRoundServiceRequest_(const ContainerAllocator& _alloc)
    : motor_id(0)
    , direction(0)
    , save_offset(false)  {
  (void)_alloc;
    }



   typedef int32_t _motor_id_type;
  _motor_id_type motor_id;

   typedef int32_t _direction_type;
  _direction_type direction;

   typedef uint8_t _save_offset_type;
  _save_offset_type save_offset;





  typedef boost::shared_ptr< ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct setMotorEncoderRoundServiceRequest_

typedef ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<std::allocator<void> > setMotorEncoderRoundServiceRequest;

typedef boost::shared_ptr< ::kuavo_msgs::setMotorEncoderRoundServiceRequest > setMotorEncoderRoundServiceRequestPtr;
typedef boost::shared_ptr< ::kuavo_msgs::setMotorEncoderRoundServiceRequest const> setMotorEncoderRoundServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.motor_id == rhs.motor_id &&
    lhs.direction == rhs.direction &&
    lhs.save_offset == rhs.save_offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5104e77e6b69ebe8cb1f06d5c2f1d52a";
  }

  static const char* value(const ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5104e77e6b69ebe8ULL;
  static const uint64_t static_value2 = 0xcb1f06d5c2f1d52aULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/setMotorEncoderRoundServiceRequest";
  }

  static const char* value(const ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 设置电机编码器圈数，用于单编码器版本的校准\n"
"# 传入参数\n"
"int32 motor_id     # 电机 ID\n"
"int32 direction    # 方向，1 表示顺时针+1圈，-1 表示逆时针-1圈\n"
"bool save_offset   # 是否保存偏移量到文件\n"
;
  }

  static const char* value(const ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_id);
      stream.next(m.direction);
      stream.next(m.save_offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct setMotorEncoderRoundServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::setMotorEncoderRoundServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "motor_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor_id);
    s << indent << "direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.direction);
    s << indent << "save_offset: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.save_offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_SETMOTORENCODERROUNDSERVICEREQUEST_H
