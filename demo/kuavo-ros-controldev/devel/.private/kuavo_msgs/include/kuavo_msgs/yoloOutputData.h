// Generated by gencpp from file kuavo_msgs/yoloOutputData.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_YOLOOUTPUTDATA_H
#define KUAVO_MSGS_MESSAGE_YOLOOUTPUTDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct yoloOutputData_
{
  typedef yoloOutputData_<ContainerAllocator> Type;

  yoloOutputData_()
    : class_name()
    , class_id(0)
    , confidence(0.0)
    , x_pos(0.0)
    , y_pos(0.0)
    , height(0.0)
    , width(0.0)  {
    }
  yoloOutputData_(const ContainerAllocator& _alloc)
    : class_name(_alloc)
    , class_id(0)
    , confidence(0.0)
    , x_pos(0.0)
    , y_pos(0.0)
    , height(0.0)
    , width(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _class_name_type;
  _class_name_type class_name;

   typedef int32_t _class_id_type;
  _class_id_type class_id;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef float _x_pos_type;
  _x_pos_type x_pos;

   typedef float _y_pos_type;
  _y_pos_type y_pos;

   typedef float _height_type;
  _height_type height;

   typedef float _width_type;
  _width_type width;





  typedef boost::shared_ptr< ::kuavo_msgs::yoloOutputData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::yoloOutputData_<ContainerAllocator> const> ConstPtr;

}; // struct yoloOutputData_

typedef ::kuavo_msgs::yoloOutputData_<std::allocator<void> > yoloOutputData;

typedef boost::shared_ptr< ::kuavo_msgs::yoloOutputData > yoloOutputDataPtr;
typedef boost::shared_ptr< ::kuavo_msgs::yoloOutputData const> yoloOutputDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::yoloOutputData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::yoloOutputData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::yoloOutputData_<ContainerAllocator1> & lhs, const ::kuavo_msgs::yoloOutputData_<ContainerAllocator2> & rhs)
{
  return lhs.class_name == rhs.class_name &&
    lhs.class_id == rhs.class_id &&
    lhs.confidence == rhs.confidence &&
    lhs.x_pos == rhs.x_pos &&
    lhs.y_pos == rhs.y_pos &&
    lhs.height == rhs.height &&
    lhs.width == rhs.width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::yoloOutputData_<ContainerAllocator1> & lhs, const ::kuavo_msgs::yoloOutputData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::yoloOutputData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::yoloOutputData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::yoloOutputData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::yoloOutputData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::yoloOutputData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::yoloOutputData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::yoloOutputData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "137434f9d0388d58c5d9dc2d88f9e8f1";
  }

  static const char* value(const ::kuavo_msgs::yoloOutputData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x137434f9d0388d58ULL;
  static const uint64_t static_value2 = 0xc5d9dc2d88f9e8f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::yoloOutputData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/yoloOutputData";
  }

  static const char* value(const ::kuavo_msgs::yoloOutputData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::yoloOutputData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string class_name\n"
"int32 class_id\n"
"float32 confidence\n"
"float32 x_pos\n"
"float32 y_pos\n"
"float32 height\n"
"float32 width\n"
;
  }

  static const char* value(const ::kuavo_msgs::yoloOutputData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::yoloOutputData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_name);
      stream.next(m.class_id);
      stream.next(m.confidence);
      stream.next(m.x_pos);
      stream.next(m.y_pos);
      stream.next(m.height);
      stream.next(m.width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct yoloOutputData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::yoloOutputData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::yoloOutputData_<ContainerAllocator>& v)
  {
    s << indent << "class_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_name);
    s << indent << "class_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.class_id);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "x_pos: ";
    Printer<float>::stream(s, indent + "  ", v.x_pos);
    s << indent << "y_pos: ";
    Printer<float>::stream(s, indent + "  ", v.y_pos);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_YOLOOUTPUTDATA_H
