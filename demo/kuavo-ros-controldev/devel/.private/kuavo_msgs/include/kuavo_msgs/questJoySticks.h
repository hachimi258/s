// Generated by gencpp from file kuavo_msgs/questJoySticks.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_QUESTJOYSTICKS_H
#define KUAVO_MSGS_MESSAGE_QUESTJOYSTICKS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct questJoySticks_
{
  typedef questJoySticks_<ContainerAllocator> Type;

  questJoySticks_()
    : left_x(0.0)
    , left_y(0.0)
    , left_trigger(0.0)
    , left_grip(0.0)
    , left_first_button_pressed(false)
    , left_second_button_pressed(false)
    , left_first_button_touched(false)
    , left_second_button_touched(false)
    , right_x(0.0)
    , right_y(0.0)
    , right_trigger(0.0)
    , right_grip(0.0)
    , right_first_button_pressed(false)
    , right_second_button_pressed(false)
    , right_first_button_touched(false)
    , right_second_button_touched(false)  {
    }
  questJoySticks_(const ContainerAllocator& _alloc)
    : left_x(0.0)
    , left_y(0.0)
    , left_trigger(0.0)
    , left_grip(0.0)
    , left_first_button_pressed(false)
    , left_second_button_pressed(false)
    , left_first_button_touched(false)
    , left_second_button_touched(false)
    , right_x(0.0)
    , right_y(0.0)
    , right_trigger(0.0)
    , right_grip(0.0)
    , right_first_button_pressed(false)
    , right_second_button_pressed(false)
    , right_first_button_touched(false)
    , right_second_button_touched(false)  {
  (void)_alloc;
    }



   typedef float _left_x_type;
  _left_x_type left_x;

   typedef float _left_y_type;
  _left_y_type left_y;

   typedef float _left_trigger_type;
  _left_trigger_type left_trigger;

   typedef float _left_grip_type;
  _left_grip_type left_grip;

   typedef uint8_t _left_first_button_pressed_type;
  _left_first_button_pressed_type left_first_button_pressed;

   typedef uint8_t _left_second_button_pressed_type;
  _left_second_button_pressed_type left_second_button_pressed;

   typedef uint8_t _left_first_button_touched_type;
  _left_first_button_touched_type left_first_button_touched;

   typedef uint8_t _left_second_button_touched_type;
  _left_second_button_touched_type left_second_button_touched;

   typedef float _right_x_type;
  _right_x_type right_x;

   typedef float _right_y_type;
  _right_y_type right_y;

   typedef float _right_trigger_type;
  _right_trigger_type right_trigger;

   typedef float _right_grip_type;
  _right_grip_type right_grip;

   typedef uint8_t _right_first_button_pressed_type;
  _right_first_button_pressed_type right_first_button_pressed;

   typedef uint8_t _right_second_button_pressed_type;
  _right_second_button_pressed_type right_second_button_pressed;

   typedef uint8_t _right_first_button_touched_type;
  _right_first_button_touched_type right_first_button_touched;

   typedef uint8_t _right_second_button_touched_type;
  _right_second_button_touched_type right_second_button_touched;





  typedef boost::shared_ptr< ::kuavo_msgs::questJoySticks_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::questJoySticks_<ContainerAllocator> const> ConstPtr;

}; // struct questJoySticks_

typedef ::kuavo_msgs::questJoySticks_<std::allocator<void> > questJoySticks;

typedef boost::shared_ptr< ::kuavo_msgs::questJoySticks > questJoySticksPtr;
typedef boost::shared_ptr< ::kuavo_msgs::questJoySticks const> questJoySticksConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::questJoySticks_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::questJoySticks_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::questJoySticks_<ContainerAllocator1> & lhs, const ::kuavo_msgs::questJoySticks_<ContainerAllocator2> & rhs)
{
  return lhs.left_x == rhs.left_x &&
    lhs.left_y == rhs.left_y &&
    lhs.left_trigger == rhs.left_trigger &&
    lhs.left_grip == rhs.left_grip &&
    lhs.left_first_button_pressed == rhs.left_first_button_pressed &&
    lhs.left_second_button_pressed == rhs.left_second_button_pressed &&
    lhs.left_first_button_touched == rhs.left_first_button_touched &&
    lhs.left_second_button_touched == rhs.left_second_button_touched &&
    lhs.right_x == rhs.right_x &&
    lhs.right_y == rhs.right_y &&
    lhs.right_trigger == rhs.right_trigger &&
    lhs.right_grip == rhs.right_grip &&
    lhs.right_first_button_pressed == rhs.right_first_button_pressed &&
    lhs.right_second_button_pressed == rhs.right_second_button_pressed &&
    lhs.right_first_button_touched == rhs.right_first_button_touched &&
    lhs.right_second_button_touched == rhs.right_second_button_touched;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::questJoySticks_<ContainerAllocator1> & lhs, const ::kuavo_msgs::questJoySticks_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::questJoySticks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::questJoySticks_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::questJoySticks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::questJoySticks_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::questJoySticks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::questJoySticks_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::questJoySticks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c686b65cdd180a9046db651d6492ec65";
  }

  static const char* value(const ::kuavo_msgs::questJoySticks_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc686b65cdd180a90ULL;
  static const uint64_t static_value2 = 0x46db651d6492ec65ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::questJoySticks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/questJoySticks";
  }

  static const char* value(const ::kuavo_msgs::questJoySticks_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::questJoySticks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 left_x\n"
"float32 left_y\n"
"float32 left_trigger\n"
"float32 left_grip\n"
"bool left_first_button_pressed\n"
"bool left_second_button_pressed\n"
"bool left_first_button_touched\n"
"bool left_second_button_touched\n"
"float32 right_x\n"
"float32 right_y\n"
"float32 right_trigger\n"
"float32 right_grip\n"
"bool right_first_button_pressed\n"
"bool right_second_button_pressed\n"
"bool right_first_button_touched\n"
"bool right_second_button_touched\n"
;
  }

  static const char* value(const ::kuavo_msgs::questJoySticks_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::questJoySticks_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_x);
      stream.next(m.left_y);
      stream.next(m.left_trigger);
      stream.next(m.left_grip);
      stream.next(m.left_first_button_pressed);
      stream.next(m.left_second_button_pressed);
      stream.next(m.left_first_button_touched);
      stream.next(m.left_second_button_touched);
      stream.next(m.right_x);
      stream.next(m.right_y);
      stream.next(m.right_trigger);
      stream.next(m.right_grip);
      stream.next(m.right_first_button_pressed);
      stream.next(m.right_second_button_pressed);
      stream.next(m.right_first_button_touched);
      stream.next(m.right_second_button_touched);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct questJoySticks_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::questJoySticks_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::questJoySticks_<ContainerAllocator>& v)
  {
    s << indent << "left_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_x);
    s << indent << "left_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_y);
    s << indent << "left_trigger: ";
    Printer<float>::stream(s, indent + "  ", v.left_trigger);
    s << indent << "left_grip: ";
    Printer<float>::stream(s, indent + "  ", v.left_grip);
    s << indent << "left_first_button_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_first_button_pressed);
    s << indent << "left_second_button_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_second_button_pressed);
    s << indent << "left_first_button_touched: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_first_button_touched);
    s << indent << "left_second_button_touched: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_second_button_touched);
    s << indent << "right_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_x);
    s << indent << "right_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_y);
    s << indent << "right_trigger: ";
    Printer<float>::stream(s, indent + "  ", v.right_trigger);
    s << indent << "right_grip: ";
    Printer<float>::stream(s, indent + "  ", v.right_grip);
    s << indent << "right_first_button_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_first_button_pressed);
    s << indent << "right_second_button_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_second_button_pressed);
    s << indent << "right_first_button_touched: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_first_button_touched);
    s << indent << "right_second_button_touched: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_second_button_touched);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_QUESTJOYSTICKS_H
