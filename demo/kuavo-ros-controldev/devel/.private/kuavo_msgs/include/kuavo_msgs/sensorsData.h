// Generated by gencpp from file kuavo_msgs/sensorsData.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_SENSORSDATA_H
#define KUAVO_MSGS_MESSAGE_SENSORSDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <kuavo_msgs/jointData.h>
#include <kuavo_msgs/imuData.h>
#include <kuavo_msgs/endEffectorData.h>

namespace kuavo_msgs
{
template <class ContainerAllocator>
struct sensorsData_
{
  typedef sensorsData_<ContainerAllocator> Type;

  sensorsData_()
    : header()
    , sensor_time()
    , joint_data()
    , imu_data()
    , end_effector_data()  {
    }
  sensorsData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sensor_time()
    , joint_data(_alloc)
    , imu_data(_alloc)
    , end_effector_data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _sensor_time_type;
  _sensor_time_type sensor_time;

   typedef  ::kuavo_msgs::jointData_<ContainerAllocator>  _joint_data_type;
  _joint_data_type joint_data;

   typedef  ::kuavo_msgs::imuData_<ContainerAllocator>  _imu_data_type;
  _imu_data_type imu_data;

   typedef  ::kuavo_msgs::endEffectorData_<ContainerAllocator>  _end_effector_data_type;
  _end_effector_data_type end_effector_data;





  typedef boost::shared_ptr< ::kuavo_msgs::sensorsData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::sensorsData_<ContainerAllocator> const> ConstPtr;

}; // struct sensorsData_

typedef ::kuavo_msgs::sensorsData_<std::allocator<void> > sensorsData;

typedef boost::shared_ptr< ::kuavo_msgs::sensorsData > sensorsDataPtr;
typedef boost::shared_ptr< ::kuavo_msgs::sensorsData const> sensorsDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::sensorsData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::sensorsData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::sensorsData_<ContainerAllocator1> & lhs, const ::kuavo_msgs::sensorsData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sensor_time == rhs.sensor_time &&
    lhs.joint_data == rhs.joint_data &&
    lhs.imu_data == rhs.imu_data &&
    lhs.end_effector_data == rhs.end_effector_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::sensorsData_<ContainerAllocator1> & lhs, const ::kuavo_msgs::sensorsData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::sensorsData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::sensorsData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::sensorsData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::sensorsData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::sensorsData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::sensorsData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::sensorsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54439d3ac2ef33d46fd7cf6d324860c3";
  }

  static const char* value(const ::kuavo_msgs::sensorsData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54439d3ac2ef33d4ULL;
  static const uint64_t static_value2 = 0x6fd7cf6d324860c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::sensorsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/sensorsData";
  }

  static const char* value(const ::kuavo_msgs::sensorsData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::sensorsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"time sensor_time\n"
"kuavo_msgs/jointData joint_data\n"
"kuavo_msgs/imuData imu_data\n"
"kuavo_msgs/endEffectorData end_effector_data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: kuavo_msgs/jointData\n"
"float64[] joint_q  \n"
"float64[] joint_v  \n"
"float64[] joint_vd    \n"
"float64[] joint_current  \n"
"\n"
"================================================================================\n"
"MSG: kuavo_msgs/imuData\n"
"geometry_msgs/Vector3 gyro    #陀螺仪数据\n"
"geometry_msgs/Vector3 acc     #加速计数据\n"
"geometry_msgs/Vector3 free_acc    #无重力加速度数据\n"
"geometry_msgs/Quaternion quat    #四元数数据\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: kuavo_msgs/endEffectorData\n"
"string[] name  \n"
"float64[] position\n"
"float64[] velocity  \n"
"float64[] effort\n"
;
  }

  static const char* value(const ::kuavo_msgs::sensorsData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::sensorsData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sensor_time);
      stream.next(m.joint_data);
      stream.next(m.imu_data);
      stream.next(m.end_effector_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensorsData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::sensorsData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::sensorsData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sensor_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.sensor_time);
    s << indent << "joint_data: ";
    s << std::endl;
    Printer< ::kuavo_msgs::jointData_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_data);
    s << indent << "imu_data: ";
    s << std::endl;
    Printer< ::kuavo_msgs::imuData_<ContainerAllocator> >::stream(s, indent + "  ", v.imu_data);
    s << indent << "end_effector_data: ";
    s << std::endl;
    Printer< ::kuavo_msgs::endEffectorData_<ContainerAllocator> >::stream(s, indent + "  ", v.end_effector_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_SENSORSDATA_H
