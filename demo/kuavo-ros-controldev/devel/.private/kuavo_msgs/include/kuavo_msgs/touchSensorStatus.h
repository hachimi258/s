// Generated by gencpp from file kuavo_msgs/touchSensorStatus.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_TOUCHSENSORSTATUS_H
#define KUAVO_MSGS_MESSAGE_TOUCHSENSORSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct touchSensorStatus_
{
  typedef touchSensorStatus_<ContainerAllocator> Type;

  touchSensorStatus_()
    : normal_force1(0)
    , normal_force2(0)
    , normal_force3(0)
    , tangential_force1(0)
    , tangential_force2(0)
    , tangential_force3(0)
    , tangential_direction1(0)
    , tangential_direction2(0)
    , tangential_direction3(0)
    , self_proximity1(0)
    , self_proximity2(0)
    , mutual_proximity(0)
    , status(0)  {
    }
  touchSensorStatus_(const ContainerAllocator& _alloc)
    : normal_force1(0)
    , normal_force2(0)
    , normal_force3(0)
    , tangential_force1(0)
    , tangential_force2(0)
    , tangential_force3(0)
    , tangential_direction1(0)
    , tangential_direction2(0)
    , tangential_direction3(0)
    , self_proximity1(0)
    , self_proximity2(0)
    , mutual_proximity(0)
    , status(0)  {
  (void)_alloc;
    }



   typedef uint16_t _normal_force1_type;
  _normal_force1_type normal_force1;

   typedef uint16_t _normal_force2_type;
  _normal_force2_type normal_force2;

   typedef uint16_t _normal_force3_type;
  _normal_force3_type normal_force3;

   typedef uint16_t _tangential_force1_type;
  _tangential_force1_type tangential_force1;

   typedef uint16_t _tangential_force2_type;
  _tangential_force2_type tangential_force2;

   typedef uint16_t _tangential_force3_type;
  _tangential_force3_type tangential_force3;

   typedef uint16_t _tangential_direction1_type;
  _tangential_direction1_type tangential_direction1;

   typedef uint16_t _tangential_direction2_type;
  _tangential_direction2_type tangential_direction2;

   typedef uint16_t _tangential_direction3_type;
  _tangential_direction3_type tangential_direction3;

   typedef uint32_t _self_proximity1_type;
  _self_proximity1_type self_proximity1;

   typedef uint32_t _self_proximity2_type;
  _self_proximity2_type self_proximity2;

   typedef uint32_t _mutual_proximity_type;
  _mutual_proximity_type mutual_proximity;

   typedef uint16_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> const> ConstPtr;

}; // struct touchSensorStatus_

typedef ::kuavo_msgs::touchSensorStatus_<std::allocator<void> > touchSensorStatus;

typedef boost::shared_ptr< ::kuavo_msgs::touchSensorStatus > touchSensorStatusPtr;
typedef boost::shared_ptr< ::kuavo_msgs::touchSensorStatus const> touchSensorStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::touchSensorStatus_<ContainerAllocator1> & lhs, const ::kuavo_msgs::touchSensorStatus_<ContainerAllocator2> & rhs)
{
  return lhs.normal_force1 == rhs.normal_force1 &&
    lhs.normal_force2 == rhs.normal_force2 &&
    lhs.normal_force3 == rhs.normal_force3 &&
    lhs.tangential_force1 == rhs.tangential_force1 &&
    lhs.tangential_force2 == rhs.tangential_force2 &&
    lhs.tangential_force3 == rhs.tangential_force3 &&
    lhs.tangential_direction1 == rhs.tangential_direction1 &&
    lhs.tangential_direction2 == rhs.tangential_direction2 &&
    lhs.tangential_direction3 == rhs.tangential_direction3 &&
    lhs.self_proximity1 == rhs.self_proximity1 &&
    lhs.self_proximity2 == rhs.self_proximity2 &&
    lhs.mutual_proximity == rhs.mutual_proximity &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::touchSensorStatus_<ContainerAllocator1> & lhs, const ::kuavo_msgs::touchSensorStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08cd59dc396363cba4d4f01df99ec86c";
  }

  static const char* value(const ::kuavo_msgs::touchSensorStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08cd59dc396363cbULL;
  static const uint64_t static_value2 = 0xa4d4f01df99ec86cULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/touchSensorStatus";
  }

  static const char* value(const ::kuavo_msgs::touchSensorStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 normal_force1  # 法向力1\n"
"uint16 normal_force2  # 法向力2\n"
"uint16 normal_force3  # 法向力3\n"
"uint16 tangential_force1  # 切向力1\n"
"uint16 tangential_force2  # 切向力2\n"
"uint16 tangential_force3  # 切向力3\n"
"uint16 tangential_direction1  # 切向力方向1\n"
"uint16 tangential_direction2  # 切向力方向2\n"
"uint16 tangential_direction3  # 切向力方向3\n"
"uint32 self_proximity1  # 自电容接近传感器1\n"
"uint32 self_proximity2  # 自电容接近传感器2\n"
"uint32 mutual_proximity  # 互电容接近传感器\n"
"uint16 status  # 传感器状态\n"
;
  }

  static const char* value(const ::kuavo_msgs::touchSensorStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.normal_force1);
      stream.next(m.normal_force2);
      stream.next(m.normal_force3);
      stream.next(m.tangential_force1);
      stream.next(m.tangential_force2);
      stream.next(m.tangential_force3);
      stream.next(m.tangential_direction1);
      stream.next(m.tangential_direction2);
      stream.next(m.tangential_direction3);
      stream.next(m.self_proximity1);
      stream.next(m.self_proximity2);
      stream.next(m.mutual_proximity);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct touchSensorStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::touchSensorStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::touchSensorStatus_<ContainerAllocator>& v)
  {
    s << indent << "normal_force1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.normal_force1);
    s << indent << "normal_force2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.normal_force2);
    s << indent << "normal_force3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.normal_force3);
    s << indent << "tangential_force1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tangential_force1);
    s << indent << "tangential_force2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tangential_force2);
    s << indent << "tangential_force3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tangential_force3);
    s << indent << "tangential_direction1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tangential_direction1);
    s << indent << "tangential_direction2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tangential_direction2);
    s << indent << "tangential_direction3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tangential_direction3);
    s << indent << "self_proximity1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.self_proximity1);
    s << indent << "self_proximity2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.self_proximity2);
    s << indent << "mutual_proximity: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.mutual_proximity);
    s << indent << "status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_TOUCHSENSORSTATUS_H
