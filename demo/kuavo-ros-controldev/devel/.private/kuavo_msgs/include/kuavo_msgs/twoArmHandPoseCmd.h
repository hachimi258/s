// Generated by gencpp from file kuavo_msgs/twoArmHandPoseCmd.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_TWOARMHANDPOSECMD_H
#define KUAVO_MSGS_MESSAGE_TWOARMHANDPOSECMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kuavo_msgs/twoArmHandPose.h>
#include <kuavo_msgs/ikSolveParam.h>

namespace kuavo_msgs
{
template <class ContainerAllocator>
struct twoArmHandPoseCmd_
{
  typedef twoArmHandPoseCmd_<ContainerAllocator> Type;

  twoArmHandPoseCmd_()
    : hand_poses()
    , use_custom_ik_param(false)
    , joint_angles_as_q0(false)
    , ik_param()
    , frame(0)  {
    }
  twoArmHandPoseCmd_(const ContainerAllocator& _alloc)
    : hand_poses(_alloc)
    , use_custom_ik_param(false)
    , joint_angles_as_q0(false)
    , ik_param(_alloc)
    , frame(0)  {
  (void)_alloc;
    }



   typedef  ::kuavo_msgs::twoArmHandPose_<ContainerAllocator>  _hand_poses_type;
  _hand_poses_type hand_poses;

   typedef uint8_t _use_custom_ik_param_type;
  _use_custom_ik_param_type use_custom_ik_param;

   typedef uint8_t _joint_angles_as_q0_type;
  _joint_angles_as_q0_type joint_angles_as_q0;

   typedef  ::kuavo_msgs::ikSolveParam_<ContainerAllocator>  _ik_param_type;
  _ik_param_type ik_param;

   typedef int32_t _frame_type;
  _frame_type frame;





  typedef boost::shared_ptr< ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> const> ConstPtr;

}; // struct twoArmHandPoseCmd_

typedef ::kuavo_msgs::twoArmHandPoseCmd_<std::allocator<void> > twoArmHandPoseCmd;

typedef boost::shared_ptr< ::kuavo_msgs::twoArmHandPoseCmd > twoArmHandPoseCmdPtr;
typedef boost::shared_ptr< ::kuavo_msgs::twoArmHandPoseCmd const> twoArmHandPoseCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator1> & lhs, const ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator2> & rhs)
{
  return lhs.hand_poses == rhs.hand_poses &&
    lhs.use_custom_ik_param == rhs.use_custom_ik_param &&
    lhs.joint_angles_as_q0 == rhs.joint_angles_as_q0 &&
    lhs.ik_param == rhs.ik_param &&
    lhs.frame == rhs.frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator1> & lhs, const ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd5f0a3dc4154eb55aff1c874e2dc81e";
  }

  static const char* value(const ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd5f0a3dc4154eb5ULL;
  static const uint64_t static_value2 = 0x5aff1c874e2dc81eULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/twoArmHandPoseCmd";
  }

  static const char* value(const ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twoArmHandPose  hand_poses\n"
"# params for the IK solver\n"
"bool use_custom_ik_param\n"
"bool joint_angles_as_q0\n"
"ikSolveParam ik_param\n"
"int32 frame # 0 keep current frame  1 world frame (based on odom)  2  local frame   3  manipulation world frame \n"
"================================================================================\n"
"MSG: kuavo_msgs/twoArmHandPose\n"
"Header header\n"
"armHandPose  left_pose\n"
"armHandPose  right_pose\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: kuavo_msgs/armHandPose\n"
"float64[3] pos_xyz\n"
"float64[4] quat_xyzw\n"
"\n"
"float64[3] elbow_pos_xyz\n"
"\n"
"float64[7] joint_angles\n"
"================================================================================\n"
"MSG: kuavo_msgs/ikSolveParam\n"
"# snopt params\n"
"float64 major_optimality_tol\n"
"float64 major_feasibility_tol\n"
"float64 minor_feasibility_tol\n"
"float64 major_iterations_limit\n"
"# constraint and cost params\n"
"float64 oritation_constraint_tol\n"
"float64 pos_constraint_tol # work when pos_cost_weight > 0.0\n"
"float64 pos_cost_weight\n"
;
  }

  static const char* value(const ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hand_poses);
      stream.next(m.use_custom_ik_param);
      stream.next(m.joint_angles_as_q0);
      stream.next(m.ik_param);
      stream.next(m.frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct twoArmHandPoseCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::twoArmHandPoseCmd_<ContainerAllocator>& v)
  {
    s << indent << "hand_poses: ";
    s << std::endl;
    Printer< ::kuavo_msgs::twoArmHandPose_<ContainerAllocator> >::stream(s, indent + "  ", v.hand_poses);
    s << indent << "use_custom_ik_param: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_custom_ik_param);
    s << indent << "joint_angles_as_q0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joint_angles_as_q0);
    s << indent << "ik_param: ";
    s << std::endl;
    Printer< ::kuavo_msgs::ikSolveParam_<ContainerAllocator> >::stream(s, indent + "  ", v.ik_param);
    s << indent << "frame: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_TWOARMHANDPOSECMD_H
