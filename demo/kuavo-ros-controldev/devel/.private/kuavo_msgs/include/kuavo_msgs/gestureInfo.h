// Generated by gencpp from file kuavo_msgs/gestureInfo.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_GESTUREINFO_H
#define KUAVO_MSGS_MESSAGE_GESTUREINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct gestureInfo_
{
  typedef gestureInfo_<ContainerAllocator> Type;

  gestureInfo_()
    : gesture_name()
    , alias()
    , description()  {
    }
  gestureInfo_(const ContainerAllocator& _alloc)
    : gesture_name(_alloc)
    , alias(_alloc)
    , description(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gesture_name_type;
  _gesture_name_type gesture_name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _alias_type;
  _alias_type alias;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _description_type;
  _description_type description;





  typedef boost::shared_ptr< ::kuavo_msgs::gestureInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::gestureInfo_<ContainerAllocator> const> ConstPtr;

}; // struct gestureInfo_

typedef ::kuavo_msgs::gestureInfo_<std::allocator<void> > gestureInfo;

typedef boost::shared_ptr< ::kuavo_msgs::gestureInfo > gestureInfoPtr;
typedef boost::shared_ptr< ::kuavo_msgs::gestureInfo const> gestureInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::gestureInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::gestureInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::gestureInfo_<ContainerAllocator1> & lhs, const ::kuavo_msgs::gestureInfo_<ContainerAllocator2> & rhs)
{
  return lhs.gesture_name == rhs.gesture_name &&
    lhs.alias == rhs.alias &&
    lhs.description == rhs.description;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::gestureInfo_<ContainerAllocator1> & lhs, const ::kuavo_msgs::gestureInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::gestureInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::gestureInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::gestureInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::gestureInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::gestureInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::gestureInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::gestureInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65efb896db2f0292354e0a9098b39b97";
  }

  static const char* value(const ::kuavo_msgs::gestureInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65efb896db2f0292ULL;
  static const uint64_t static_value2 = 0x354e0a9098b39b97ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::gestureInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/gestureInfo";
  }

  static const char* value(const ::kuavo_msgs::gestureInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::gestureInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message defines the information for a single gesture.\n"
"# It includes the name, a list of aliases, and a description of the gesture.\n"
"\n"
"# The name of the gesture.\n"
"string gesture_name\n"
"\n"
"# A list of aliases for the gesture. These can be alternative names or shortcuts.\n"
"string[] alias\n"
"\n"
"# A description of the gesture, providing more detailed information about its purpose and usage.\n"
"string description\n"
;
  }

  static const char* value(const ::kuavo_msgs::gestureInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::gestureInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gesture_name);
      stream.next(m.alias);
      stream.next(m.description);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gestureInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::gestureInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::gestureInfo_<ContainerAllocator>& v)
  {
    s << indent << "gesture_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gesture_name);
    s << indent << "alias[]" << std::endl;
    for (size_t i = 0; i < v.alias.size(); ++i)
    {
      s << indent << "  alias[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.alias[i]);
    }
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.description);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_GESTUREINFO_H
