// Generated by gencpp from file kuavo_msgs/footPose.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_FOOTPOSE_H
#define KUAVO_MSGS_MESSAGE_FOOTPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct footPose_
{
  typedef footPose_<ContainerAllocator> Type;

  footPose_()
    : footPose()
    , torsoPose()  {
      footPose.assign(0.0);

      torsoPose.assign(0.0);
  }
  footPose_(const ContainerAllocator& _alloc)
    : footPose()
    , torsoPose()  {
  (void)_alloc;
      footPose.assign(0.0);

      torsoPose.assign(0.0);
  }



   typedef boost::array<double, 4>  _footPose_type;
  _footPose_type footPose;

   typedef boost::array<double, 4>  _torsoPose_type;
  _torsoPose_type torsoPose;





  typedef boost::shared_ptr< ::kuavo_msgs::footPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::footPose_<ContainerAllocator> const> ConstPtr;

}; // struct footPose_

typedef ::kuavo_msgs::footPose_<std::allocator<void> > footPose;

typedef boost::shared_ptr< ::kuavo_msgs::footPose > footPosePtr;
typedef boost::shared_ptr< ::kuavo_msgs::footPose const> footPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::footPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::footPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::footPose_<ContainerAllocator1> & lhs, const ::kuavo_msgs::footPose_<ContainerAllocator2> & rhs)
{
  return lhs.footPose == rhs.footPose &&
    lhs.torsoPose == rhs.torsoPose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::footPose_<ContainerAllocator1> & lhs, const ::kuavo_msgs::footPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::footPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::footPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::footPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::footPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::footPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::footPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::footPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0acb7ad1ed1ee5a0a630b91b650f49a";
  }

  static const char* value(const ::kuavo_msgs::footPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0acb7ad1ed1ee5aULL;
  static const uint64_t static_value2 = 0x0a630b91b650f49aULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::footPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/footPose";
  }

  static const char* value(const ::kuavo_msgs::footPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::footPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[4] footPose # x, y, z, yaw\n"
"float64[4] torsoPose # x, y, z, yaw\n"
;
  }

  static const char* value(const ::kuavo_msgs::footPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::footPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.footPose);
      stream.next(m.torsoPose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct footPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::footPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::footPose_<ContainerAllocator>& v)
  {
    s << indent << "footPose[]" << std::endl;
    for (size_t i = 0; i < v.footPose.size(); ++i)
    {
      s << indent << "  footPose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.footPose[i]);
    }
    s << indent << "torsoPose[]" << std::endl;
    for (size_t i = 0; i < v.torsoPose.size(); ++i)
    {
      s << indent << "  torsoPose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.torsoPose[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_FOOTPOSE_H
