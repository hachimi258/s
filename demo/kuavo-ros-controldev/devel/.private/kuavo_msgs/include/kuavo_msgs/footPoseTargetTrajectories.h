// Generated by gencpp from file kuavo_msgs/footPoseTargetTrajectories.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_FOOTPOSETARGETTRAJECTORIES_H
#define KUAVO_MSGS_MESSAGE_FOOTPOSETARGETTRAJECTORIES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kuavo_msgs/footPose.h>
#include <kuavo_msgs/footPoses.h>

namespace kuavo_msgs
{
template <class ContainerAllocator>
struct footPoseTargetTrajectories_
{
  typedef footPoseTargetTrajectories_<ContainerAllocator> Type;

  footPoseTargetTrajectories_()
    : timeTrajectory()
    , footIndexTrajectory()
    , footPoseTrajectory()
    , additionalFootPoseTrajectory()  {
    }
  footPoseTargetTrajectories_(const ContainerAllocator& _alloc)
    : timeTrajectory(_alloc)
    , footIndexTrajectory(_alloc)
    , footPoseTrajectory(_alloc)
    , additionalFootPoseTrajectory(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _timeTrajectory_type;
  _timeTrajectory_type timeTrajectory;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _footIndexTrajectory_type;
  _footIndexTrajectory_type footIndexTrajectory;

   typedef std::vector< ::kuavo_msgs::footPose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::kuavo_msgs::footPose_<ContainerAllocator> >> _footPoseTrajectory_type;
  _footPoseTrajectory_type footPoseTrajectory;

   typedef std::vector< ::kuavo_msgs::footPoses_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::kuavo_msgs::footPoses_<ContainerAllocator> >> _additionalFootPoseTrajectory_type;
  _additionalFootPoseTrajectory_type additionalFootPoseTrajectory;





  typedef boost::shared_ptr< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> const> ConstPtr;

}; // struct footPoseTargetTrajectories_

typedef ::kuavo_msgs::footPoseTargetTrajectories_<std::allocator<void> > footPoseTargetTrajectories;

typedef boost::shared_ptr< ::kuavo_msgs::footPoseTargetTrajectories > footPoseTargetTrajectoriesPtr;
typedef boost::shared_ptr< ::kuavo_msgs::footPoseTargetTrajectories const> footPoseTargetTrajectoriesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator1> & lhs, const ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator2> & rhs)
{
  return lhs.timeTrajectory == rhs.timeTrajectory &&
    lhs.footIndexTrajectory == rhs.footIndexTrajectory &&
    lhs.footPoseTrajectory == rhs.footPoseTrajectory &&
    lhs.additionalFootPoseTrajectory == rhs.additionalFootPoseTrajectory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator1> & lhs, const ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69f7e48d9a18b5c4756f9577aeefff25";
  }

  static const char* value(const ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69f7e48d9a18b5c4ULL;
  static const uint64_t static_value2 = 0x756f9577aeefff25ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/footPoseTargetTrajectories";
  }

  static const char* value(const ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[]    timeTrajectory\n"
"int32[]      footIndexTrajectory\n"
"footPose[]   footPoseTrajectory\n"
"footPoses[]  additionalFootPoseTrajectory  # 可选字段，用于存储额外的轨迹点规划值\n"
"\n"
"================================================================================\n"
"MSG: kuavo_msgs/footPose\n"
"float64[4] footPose # x, y, z, yaw\n"
"float64[4] torsoPose # x, y, z, yaw\n"
"\n"
"================================================================================\n"
"MSG: kuavo_msgs/footPoses\n"
"footPose[] data\n"
;
  }

  static const char* value(const ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeTrajectory);
      stream.next(m.footIndexTrajectory);
      stream.next(m.footPoseTrajectory);
      stream.next(m.additionalFootPoseTrajectory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct footPoseTargetTrajectories_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::footPoseTargetTrajectories_<ContainerAllocator>& v)
  {
    s << indent << "timeTrajectory[]" << std::endl;
    for (size_t i = 0; i < v.timeTrajectory.size(); ++i)
    {
      s << indent << "  timeTrajectory[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.timeTrajectory[i]);
    }
    s << indent << "footIndexTrajectory[]" << std::endl;
    for (size_t i = 0; i < v.footIndexTrajectory.size(); ++i)
    {
      s << indent << "  footIndexTrajectory[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.footIndexTrajectory[i]);
    }
    s << indent << "footPoseTrajectory[]" << std::endl;
    for (size_t i = 0; i < v.footPoseTrajectory.size(); ++i)
    {
      s << indent << "  footPoseTrajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kuavo_msgs::footPose_<ContainerAllocator> >::stream(s, indent + "    ", v.footPoseTrajectory[i]);
    }
    s << indent << "additionalFootPoseTrajectory[]" << std::endl;
    for (size_t i = 0; i < v.additionalFootPoseTrajectory.size(); ++i)
    {
      s << indent << "  additionalFootPoseTrajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kuavo_msgs::footPoses_<ContainerAllocator> >::stream(s, indent + "    ", v.additionalFootPoseTrajectory[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_FOOTPOSETARGETTRAJECTORIES_H
