// Generated by gencpp from file kuavo_msgs/enableHandTouchSensorRequest.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_ENABLEHANDTOUCHSENSORREQUEST_H
#define KUAVO_MSGS_MESSAGE_ENABLEHANDTOUCHSENSORREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct enableHandTouchSensorRequest_
{
  typedef enableHandTouchSensorRequest_<ContainerAllocator> Type;

  enableHandTouchSensorRequest_()
    : mask(0)  {
    }
  enableHandTouchSensorRequest_(const ContainerAllocator& _alloc)
    : mask(0)  {
  (void)_alloc;
    }



   typedef uint8_t _mask_type;
  _mask_type mask;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(THUMB_SENSOR)
  #undef THUMB_SENSOR
#endif
#if defined(_WIN32) && defined(INDEX_SENSOR)
  #undef INDEX_SENSOR
#endif
#if defined(_WIN32) && defined(MIDDLE_SENSOR)
  #undef MIDDLE_SENSOR
#endif
#if defined(_WIN32) && defined(RING_SENSOR)
  #undef RING_SENSOR
#endif
#if defined(_WIN32) && defined(PINKY_SENSOR)
  #undef PINKY_SENSOR
#endif

  enum {
    THUMB_SENSOR = 1u,
    INDEX_SENSOR = 2u,
    MIDDLE_SENSOR = 4u,
    RING_SENSOR = 8u,
    PINKY_SENSOR = 16u,
  };


  typedef boost::shared_ptr< ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct enableHandTouchSensorRequest_

typedef ::kuavo_msgs::enableHandTouchSensorRequest_<std::allocator<void> > enableHandTouchSensorRequest;

typedef boost::shared_ptr< ::kuavo_msgs::enableHandTouchSensorRequest > enableHandTouchSensorRequestPtr;
typedef boost::shared_ptr< ::kuavo_msgs::enableHandTouchSensorRequest const> enableHandTouchSensorRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mask == rhs.mask;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator1> & lhs, const ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0543438552cc194d7406fa44a80edec7";
  }

  static const char* value(const ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0543438552cc194dULL;
  static const uint64_t static_value2 = 0x7406fa44a80edec7ULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/enableHandTouchSensorRequest";
  }

  static const char* value(const ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Bit masks for enabling individual touch sensors on the robotic hand\n"
"# Each sensor can be enabled by setting the corresponding bit in the mask\n"
"\n"
"# Examples: 0b00000011 enables thumb and index sensors, 0b00000000 disables all sensors\n"
"#  ``` \n"
"#    mask_value = THUMB_SENSOR | INDEX_SENSOR\n"
"#    req = enableHandTouchSensorRequest()\n"
"#    req.mask = mask_value\n"
"#  ``` \n"
"\n"
"# Thumb finger touch sensor (bit 0)\n"
"uint8 THUMB_SENSOR = 1\n"
"\n"
"# Index finger touch sensor (bit 1)\n"
"uint8 INDEX_SENSOR = 2\n"
"\n"
"# Middle finger touch sensor (bit 2)\n"
"uint8 MIDDLE_SENSOR = 4\n"
"\n"
"# Ring finger touch sensor (bit 3)\n"
"uint8 RING_SENSOR = 8\n"
"\n"
"# Pinky finger touch sensor (bit 4)\n"
"uint8 PINKY_SENSOR = 16\n"
"\n"
"# Bitmask indicating which sensors to enable\n"
"# Multiple sensors can be enabled by combining masks with bitwise OR\n"
"uint8 mask\n"
;
  }

  static const char* value(const ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mask);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct enableHandTouchSensorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::enableHandTouchSensorRequest_<ContainerAllocator>& v)
  {
    s << indent << "mask: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mask);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_ENABLEHANDTOUCHSENSORREQUEST_H
