// Generated by gencpp from file kuavo_msgs/armHandPose.msg
// DO NOT EDIT!


#ifndef KUAVO_MSGS_MESSAGE_ARMHANDPOSE_H
#define KUAVO_MSGS_MESSAGE_ARMHANDPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kuavo_msgs
{
template <class ContainerAllocator>
struct armHandPose_
{
  typedef armHandPose_<ContainerAllocator> Type;

  armHandPose_()
    : pos_xyz()
    , quat_xyzw()
    , elbow_pos_xyz()
    , joint_angles()  {
      pos_xyz.assign(0.0);

      quat_xyzw.assign(0.0);

      elbow_pos_xyz.assign(0.0);

      joint_angles.assign(0.0);
  }
  armHandPose_(const ContainerAllocator& _alloc)
    : pos_xyz()
    , quat_xyzw()
    , elbow_pos_xyz()
    , joint_angles()  {
  (void)_alloc;
      pos_xyz.assign(0.0);

      quat_xyzw.assign(0.0);

      elbow_pos_xyz.assign(0.0);

      joint_angles.assign(0.0);
  }



   typedef boost::array<double, 3>  _pos_xyz_type;
  _pos_xyz_type pos_xyz;

   typedef boost::array<double, 4>  _quat_xyzw_type;
  _quat_xyzw_type quat_xyzw;

   typedef boost::array<double, 3>  _elbow_pos_xyz_type;
  _elbow_pos_xyz_type elbow_pos_xyz;

   typedef boost::array<double, 7>  _joint_angles_type;
  _joint_angles_type joint_angles;





  typedef boost::shared_ptr< ::kuavo_msgs::armHandPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kuavo_msgs::armHandPose_<ContainerAllocator> const> ConstPtr;

}; // struct armHandPose_

typedef ::kuavo_msgs::armHandPose_<std::allocator<void> > armHandPose;

typedef boost::shared_ptr< ::kuavo_msgs::armHandPose > armHandPosePtr;
typedef boost::shared_ptr< ::kuavo_msgs::armHandPose const> armHandPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kuavo_msgs::armHandPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kuavo_msgs::armHandPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kuavo_msgs::armHandPose_<ContainerAllocator1> & lhs, const ::kuavo_msgs::armHandPose_<ContainerAllocator2> & rhs)
{
  return lhs.pos_xyz == rhs.pos_xyz &&
    lhs.quat_xyzw == rhs.quat_xyzw &&
    lhs.elbow_pos_xyz == rhs.elbow_pos_xyz &&
    lhs.joint_angles == rhs.joint_angles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kuavo_msgs::armHandPose_<ContainerAllocator1> & lhs, const ::kuavo_msgs::armHandPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kuavo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::armHandPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kuavo_msgs::armHandPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::armHandPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kuavo_msgs::armHandPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::armHandPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kuavo_msgs::armHandPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kuavo_msgs::armHandPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f28a253cb60d59c6491569369f38f4d";
  }

  static const char* value(const ::kuavo_msgs::armHandPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f28a253cb60d59cULL;
  static const uint64_t static_value2 = 0x6491569369f38f4dULL;
};

template<class ContainerAllocator>
struct DataType< ::kuavo_msgs::armHandPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kuavo_msgs/armHandPose";
  }

  static const char* value(const ::kuavo_msgs::armHandPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kuavo_msgs::armHandPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[3] pos_xyz\n"
"float64[4] quat_xyzw\n"
"\n"
"float64[3] elbow_pos_xyz\n"
"\n"
"float64[7] joint_angles\n"
;
  }

  static const char* value(const ::kuavo_msgs::armHandPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kuavo_msgs::armHandPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_xyz);
      stream.next(m.quat_xyzw);
      stream.next(m.elbow_pos_xyz);
      stream.next(m.joint_angles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct armHandPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kuavo_msgs::armHandPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kuavo_msgs::armHandPose_<ContainerAllocator>& v)
  {
    s << indent << "pos_xyz[]" << std::endl;
    for (size_t i = 0; i < v.pos_xyz.size(); ++i)
    {
      s << indent << "  pos_xyz[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos_xyz[i]);
    }
    s << indent << "quat_xyzw[]" << std::endl;
    for (size_t i = 0; i < v.quat_xyzw.size(); ++i)
    {
      s << indent << "  quat_xyzw[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.quat_xyzw[i]);
    }
    s << indent << "elbow_pos_xyz[]" << std::endl;
    for (size_t i = 0; i < v.elbow_pos_xyz.size(); ++i)
    {
      s << indent << "  elbow_pos_xyz[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.elbow_pos_xyz[i]);
    }
    s << indent << "joint_angles[]" << std::endl;
    for (size_t i = 0; i < v.joint_angles.size(); ++i)
    {
      s << indent << "  joint_angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_angles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUAVO_MSGS_MESSAGE_ARMHANDPOSE_H
